openapi: 3.0.4
info:
  title: üîÆ Instill AI API
  description: Interact with Instill AI through its public API
  contact:
    name: Instill AI
    url: https://github.com/instill-ai
    email: hello@instill.tech
  license:
    name: Elastic License 2.0 (ELv2)
    url: https://github.com/instill-ai/protobufs/blob/main/LICENSE
  version: v0.50.6-beta
servers:
  - url: https://api.instill-ai.com
  - url: http://api.instill-ai.com
paths:
  '/v1alpha/namespaces/{namespaceId}/chats':
    get:
      tags:
        - üçé Agent
      summary: List chats
      description: Returns a list of chats.
      operationId: AgentPublicService_ListChats
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: page size
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: page token
          schema:
            type: string
        - name: ifAll
          in: query
          description: 'if true, all chats will be returned. This has higher priority over page_size and page_token.'
          schema:
            type: boolean
        - name: chatUid
          in: query
          description: "chat_uid this is optional, if provided, only the chat with the given chat_uid will be returned\nfirst check chat_uid then check if_all"
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - üçé Agent
      summary: Create a chat
      description: Creates a chat.
      operationId: AgentPublicService_CreateChat
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chats/{chatUid}':
    get:
      tags:
        - üçé Agent
      summary: Get a chat
      description: Gets a chat.
      operationId: AgentPublicService_GetChat
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: chat uid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetChatResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    put:
      tags:
        - üçé Agent
      summary: Update a chat
      description: Updates a chat.
      operationId: AgentPublicService_UpdateChat
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: chat uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChatBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateChatResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - üçé Agent
      summary: Delete a chat
      description: Deletes a chat.
      operationId: AgentPublicService_DeleteChat
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: chat uid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteChatResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chats/{chatUid}/messages':
    get:
      tags:
        - üçé Agent
      summary: List messages
      description: Returns a paginated list of messages.
      operationId: AgentPublicService_ListMessages
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: chat uid
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: page size
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: page token
          schema:
            type: string
        - name: ifAll
          in: query
          description: 'If true, all messages will be returned. This has higher priority over page_size and page_token.'
          schema:
            type: boolean
        - name: returnRawMessages
          in: query
          description: 'If true, the raw messages will be returned.'
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chats/{chatUid}/chat-with-agent':
    post:
      tags:
        - üçé Agent
      summary: Chat with agent
      description: Chat with the agent.
      operationId: AgentPublicService_ChatWithAgent
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: chat uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatWithAgentBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                title: Stream result of ChatWithAgentResponse
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ChatWithAgentResponse'
                  error:
                    $ref: '#/components/schemas/rpc.Status'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chats/{chatUid}/bind-table':
    post:
      tags:
        - Table
      summary: Bind table to chat
      description: Binds a table to a chat.
      operationId: AgentPublicService_BindChatTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: The UID of the chat to bind the table to.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindChatTableBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BindChatTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chats/{chatUid}/unbind-table':
    post:
      tags:
        - Table
      summary: Unbind table from chat
      description: Unbinds a table from a chat.
      operationId: AgentPublicService_UnbindChatTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: The UID of the chat to unbind the table from.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnbindChatTableBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnbindChatTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chats/{chatUid}/tables':
    get:
      tags:
        - Table
      summary: List chat tables
      description: Returns a list of tables bound to a chat.
      operationId: AgentPublicService_ListChatTables
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: chatUid
          in: path
          description: The UID of the chat to list tables for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatTablesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables':
    get:
      tags:
        - Table
      summary: List tables
      description: Returns a paginated list of tables.
      operationId: AgentPublicService_ListTables
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the tables.
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: The page token for pagination.
          schema:
            type: string
        - name: pageSize
          in: query
          description: The maximum number of tables to return.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - Table
      summary: Create a table
      description: Creates a table.
      operationId: AgentPublicService_CreateTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace where the table will be created.
          required: true
          schema:
            type: string
      requestBody:
        description: The table resource to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
        x-bodyName: table
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/from-template':
    post:
      tags:
        - Table
      summary: Create a table from a table template
      description: Creates a table from a table template.
      operationId: AgentPublicService_CreateTableFromTemplate
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableFromTemplateBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTableFromTemplateResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}':
    get:
      tags:
        - Table
      summary: Get table
      description: Gets a table.
      operationId: AgentPublicService_GetTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to fetch.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - Table
      summary: Delete table
      description: Deletes a table.
      operationId: AgentPublicService_DeleteTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    patch:
      tags:
        - Table
      summary: Update table
      description: Updates a table.
      operationId: AgentPublicService_UpdateTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The table fields that will replace the existing ones.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
        x-bodyName: table
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/builder/chat-with-agent':
    post:
      tags:
        - Table
      summary: Chat with table builder agent
      description: Chat with the table builder agent.
      operationId: AgentPublicService_ChatWithTableBuilderAgent
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to send a message to.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatWithTableBuilderAgentBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                title: Stream result of ChatWithTableBuilderAgentResponse
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ChatWithTableBuilderAgentResponse'
                  error:
                    $ref: '#/components/schemas/rpc.Status'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/builder/messages':
    get:
      tags:
        - Table
      summary: List table builder agent messages
      description: Lists the messages from the table builder agent.
      operationId: AgentPublicService_ListTableBuilderAgentMessages
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: table uid
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: page size
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: page token
          schema:
            type: string
        - name: ifAll
          in: query
          description: 'If true, all messages will be returned. This has higher priority over page_size and page_token.'
          schema:
            type: boolean
        - name: returnRawMessages
          in: query
          description: 'If true, the raw messages will be returned.'
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTableBuilderAgentMessagesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/column-definitions':
    get:
      tags:
        - Table
      summary: Get column definitions
      description: Gets column definitions for a table.
      operationId: AgentPublicService_GetColumnDefinitions
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table whose columns to fetch.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetColumnDefinitionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    put:
      tags:
        - Table
      summary: Update column definitions
      description: "Updates column definitions for a table. When updating the column\ndefinitions, if the column's agent instructions are updated, the existing\ncells in that column will be cleared and recomputed. This ensures that all\ndata reflects the latest instructions."
      operationId: AgentPublicService_UpdateColumnDefinitions
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table whose columns to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Map of column UID to their new definitions.
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ColumnDefinition'
        required: true
        x-bodyName: columnDefinitions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateColumnDefinitionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/column-definitions/{columnUid}':
    get:
      tags:
        - Table
      summary: Get column definition
      description: Gets a column definition for a table.
      operationId: AgentPublicService_GetColumnDefinition
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table whose column definition to fetch.
          required: true
          schema:
            type: string
        - name: columnUid
          in: path
          description: The UID of the column whose definition to fetch.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetColumnDefinitionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/column-definitions/{columnUid}/recompute':
    post:
      tags:
        - Table
      summary: Recompute column
      description: Recomputes all the cells in a column.
      operationId: AgentPublicService_RecomputeColumn
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table whose column to recompute.
          required: true
          schema:
            type: string
        - name: columnUid
          in: path
          description: The UID of the column to recompute.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecomputeColumnResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows':
    get:
      tags:
        - Table
      summary: List rows
      description: Returns list of rows.
      operationId: AgentPublicService_ListRows
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table whose rows to fetch.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: The maximum number of rows to return.
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The page token for pagination.
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRowsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - Table
      summary: Insert row
      description: Inserts a row into a table.
      operationId: AgentPublicService_InsertRow
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to insert rows into.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertRowBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsertRowResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - Table
      summary: Delete rows
      description: Deletes multiple rows from a table.
      operationId: AgentPublicService_DeleteRows
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the rows.
          required: true
          schema:
            type: string
        - name: rowUids
          in: query
          description: The unique identifiers of the rows to delete.
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRowsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    patch:
      tags:
        - Table
      summary: Update rows
      description: Updates multiple rows in a table.
      operationId: AgentPublicService_UpdateRows
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the rows.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRowsBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRowsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}':
    get:
      tags:
        - Table
      summary: Get row
      description: Gets a row from a table.
      operationId: AgentPublicService_GetRow
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the row.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row to get.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRowResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - Table
      summary: Delete row
      description: Deletes a row from a table.
      operationId: AgentPublicService_DeleteRow
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the row.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRowResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    patch:
      tags:
        - Table
      summary: Update row
      description: Updates a row in a table.
      operationId: AgentPublicService_UpdateRow
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the row.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRowBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRowResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/move-rows':
    post:
      tags:
        - Table
      summary: Move row
      description: Moves a row to a new position in a table.
      operationId: AgentPublicService_MoveRows
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the row.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveRowsBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveRowsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}/cells/{cellUid}':
    get:
      tags:
        - Table
      summary: Get cell
      description: Gets a cell from a table.
      operationId: AgentPublicService_GetCell
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the row.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to get.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    patch:
      tags:
        - Table
      summary: Update cell
      description: Updates a cell in a table.
      operationId: AgentPublicService_UpdateCell
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the row.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCellBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCellResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}/cells/{cellUid}/reset':
    post:
      tags:
        - Table
      summary: Reset cell
      description: "Resets a cell in a table. Resetting a cell clears its user input and\nreverts to using the computed value if available. This operation only\naffects cells that have a user input set."
      operationId: AgentPublicService_ResetCell
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the cell.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to reset.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetCellBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetCellResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}/cells/{cellUid}/recompute':
    post:
      tags:
        - Table
      summary: Recompute cell
      description: Recomputes a cell in a table.
      operationId: AgentPublicService_RecomputeCell
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the cell.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to recompute.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecomputeCellBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecomputeCellResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}/cells/{cellUid}/autofill-agent/messages':
    get:
      tags:
        - Table
      summary: List cell messages
      description: Lists the internal LLM messages that used to generate the cell value.
      operationId: AgentPublicService_ListCellAutofillAgentMessages
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the cell.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to reset.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: page size
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: page token
          schema:
            type: string
        - name: ifAll
          in: query
          description: 'If true, all messages will be returned. This has higher priority over page_size and page_token.'
          schema:
            type: boolean
        - name: returnRawMessages
          in: query
          description: 'If true, the raw messages will be returned.'
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCellAutofillAgentMessagesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}/cells/{cellUid}/lock':
    post:
      tags:
        - Table
      summary: Lock cell
      description: Locks a cell in a table.
      operationId: AgentPublicService_LockCell
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the cell.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to lock.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockCellBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockCellResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/rows/{rowUid}/cells/{cellUid}/unlock':
    post:
      tags:
        - Table
      summary: Unlock cell
      description: Unlocks a cell in a table.
      operationId: AgentPublicService_UnlockCell
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table containing the cell.
          required: true
          schema:
            type: string
        - name: rowUid
          in: path
          description: The unique identifier of the row containing the cell.
          required: true
          schema:
            type: string
        - name: cellUid
          in: path
          description: The unique identifier of the cell to unlock.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockCellBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlockCellResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/events':
    get:
      tags:
        - Table
      summary: Get table events
      description: Returns a list of events for a table.
      operationId: AgentPublicService_GetTableEvents
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to fetch events for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                title: Stream result of GetTableEventsResponse
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/GetTableEventsResponse'
                  error:
                    $ref: '#/components/schemas/rpc.Status'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/tables/{tableUid}/export':
    post:
      tags:
        - Table
      summary: Export table
      description: Exports table data.
      operationId: AgentPublicService_ExportTable
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the table.
          required: true
          schema:
            type: string
        - name: tableUid
          in: path
          description: The UID of the table to export.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportTableBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportTableResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/folders':
    get:
      tags:
        - Folder
      summary: List folders
      description: Returns a list of folders.
      operationId: AgentPublicService_ListFolders
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the folders.
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: The page token for pagination.
          schema:
            type: string
        - name: pageSize
          in: query
          description: The maximum number of folders to return.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - Folder
      summary: Create folder
      description: Creates a folder.
      operationId: AgentPublicService_CreateFolder
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace where the folder will be created.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/folders/{folderUid}':
    get:
      tags:
        - Folder
      summary: Get folder
      description: Gets a folder.
      operationId: AgentPublicService_GetFolder
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the folder.
          required: true
          schema:
            type: string
        - name: folderUid
          in: path
          description: The UID of the folder to fetch.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - Folder
      summary: Delete folder
      description: Deletes a folder.
      operationId: AgentPublicService_DeleteFolder
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the folder.
          required: true
          schema:
            type: string
        - name: folderUid
          in: path
          description: The UID of the folder to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFolderResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    patch:
      tags:
        - Folder
      summary: Update folder
      description: Updates a folder.
      operationId: AgentPublicService_UpdateFolder
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the namespace that owns the folder.
          required: true
          schema:
            type: string
        - name: folderUid
          in: path
          description: The UID of the folder to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFolderResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs':
    get:
      tags:
        - üíæ Artifact
      summary: Get all catalogs info
      description: Returns a paginated list of catalogs.
      operationId: ListCatalogs
      parameters:
        - name: namespaceId
          in: path
          description: User ID for which to list the catalogs
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalogsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - üíæ Artifact
      summary: Create a catalog
      description: Creates a catalog.
      operationId: CreateCatalog
      parameters:
        - name: namespaceId
          in: path
          description: The catalog's owner(namespaces).
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCatalogBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCatalogResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}':
    get:
      tags:
        - üíæ Artifact
      summary: Get file catalog
      description: Get the catalog file.
      operationId: GetFileCatalog
      parameters:
        - name: namespaceId
          in: path
          description: id of the namespace
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: id of the catalog
          required: true
          schema:
            type: string
        - name: fileId
          in: query
          description: id of the file(i.e. file name)
          schema:
            type: string
        - name: fileUid
          in: query
          description: Uid of the file
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileCatalogResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    put:
      tags:
        - üíæ Artifact
      summary: Update a catalog info
      description: Updates the information of a catalog.
      operationId: UpdateCatalog
      parameters:
        - name: namespaceId
          in: path
          description: The catalog owner(namespace).
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: The catalog id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCatalogBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCatalogResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - üíæ Artifact
      summary: Delete a catalog
      description: Deletes a catalog.
      operationId: DeleteCatalog
      parameters:
        - name: namespaceId
          in: path
          description: The owner's id. i.e. namespace.
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: The catalog id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCatalogResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files':
    get:
      tags:
        - üíæ Artifact
      summary: List catalog files
      description: Returns a paginated list of catalog files.
      operationId: ListCatalogFiles
      parameters:
        - name: namespaceId
          in: path
          description: The owner/namespace uid id.
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: The catalog id.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: The page size (default:10; max 100).
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The next page token(default from first file's token).
          schema:
            type: string
        - name: filter.fileUids
          in: query
          description: The file uids.
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalogFilesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - üíæ Artifact
      summary: Create a file
      description: Creates a file.
      operationId: UploadCatalogFile
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace uid
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: catalog id
          required: true
          schema:
            type: string
      requestBody:
        description: file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
        required: true
        x-bodyName: file
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadCatalogFileResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1alpha/catalogs/files:
    delete:
      tags:
        - üíæ Artifact
      summary: Delete a file
      description: Deletes a file.
      operationId: DeleteCatalogFile
      parameters:
        - name: fileUid
          in: query
          description: The file uid.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCatalogFileResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1alpha/catalogs/files/processAsync:
    post:
      tags:
        - üíæ Artifact
      summary: Process catalog files
      description: Processes catalog files.
      operationId: ProcessCatalogFiles
      parameters:
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessCatalogFilesRequest'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessCatalogFilesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files/{fileUid}':
    get:
      tags:
        - üíæ Artifact
      summary: Get catalog file
      description: Gets the file of a catalog.
      operationId: GetCatalogFile
      parameters:
        - name: namespaceId
          in: path
          description: The namespace id.
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: The catalog id.
          required: true
          schema:
            type: string
        - name: fileUid
          in: path
          description: The file uid.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogFileResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/chunks':
    get:
      tags:
        - üíæ Artifact
      summary: List catalog chunks
      description: Returns a paginated list of catalog chunks.
      operationId: ListChunks
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace id (not uid)
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: catalog id (not uid)
          required: true
          schema:
            type: string
        - name: fileUid
          in: query
          description: unique identifier of the file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChunksResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/chunks':
    get:
      tags:
        - üíæ Artifact
      summary: Search catalog chunks
      description: Returns a paginated list of catalog chunks based on search criteria.
      operationId: SearchChunks
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace id (not uid)
          required: true
          schema:
            type: string
        - name: chunkUids
          in: query
          description: chunk uids
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchChunksResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files/{fileUid}/source':
    get:
      tags:
        - üíæ Artifact
      summary: Get catalog single-source-of-truth file
      description: Gets the single-source-of-truth file of a catalog.
      operationId: GetSourceFile
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace id
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: catalog id
          required: true
          schema:
            type: string
        - name: fileUid
          in: path
          description: unique identifier of the original uploaded file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSourceFileResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files/{fileUid}/summary':
    get:
      tags:
        - üíæ Artifact
      summary: Get summary from a catalog file
      description: Gets summary from a catalog file
      operationId: GetFileSummary
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace id
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: catalog id
          required: true
          schema:
            type: string
        - name: fileUid
          in: path
          description: unique identifier of the original uploaded file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileSummaryResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/source-files':
    get:
      tags:
        - üíæ Artifact
      summary: Search single-source-of-truth files
      description: Searches the single-source-of-truth files of a catalog.
      operationId: SearchSourceFiles
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace id
          required: true
          schema:
            type: string
        - name: fileUids
          in: query
          description: search file uid
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSourceFilesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1alpha/chunks/{chunkUid}':
    post:
      tags:
        - üíæ Artifact
      summary: Update catalog chunk
      description: Updates a catalog chunk.
      operationId: UpdateChunk
      parameters:
        - name: chunkUid
          in: path
          description: chunk uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChunkBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateChunkResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/chunks/retrieve':
    post:
      tags:
        - üíæ Artifact
      summary: Retrieve similar chunks
      description: Returns the similar chunks.
      operationId: SimilarityChunksSearch
      parameters:
        - name: namespaceId
          in: path
          description: owner/namespace id
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: catalog id
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimilarityChunksSearchBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimilarityChunksSearchResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/ask':
    post:
      tags:
        - üíæ Artifact
      summary: Ask a question
      description: Asks a question.
      operationId: QuestionAnswering
      parameters:
        - name: namespaceId
          in: path
          description: id of the namespace
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: id of the catalog
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionAnsweringBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionAnsweringResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/runs':
    get:
      tags:
        - üíæ Artifact
      summary: List Catalog Runs
      description: Returns a paginated list of catalog runs.
      operationId: ListCatalogRuns
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the owner of the catalog.
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: The ID of the catalog for which the runs will be listed.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: "The maximum number of items per page to return. The default and cap values\nare 10 and 100, respectively."
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or `update_time`.\nFormat: `order_by=id` or `order_by=create_time desc`, default is `asc`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalogRunsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/object-upload-url':
    get:
      tags:
        - üíæ Artifact
      summary: Get Object Upload URL
      description: Returns the upload URL of an object.
      operationId: GetObjectUploadURL
      parameters:
        - name: namespaceId
          in: path
          description: id of the namespace
          required: true
          schema:
            type: string
        - name: objectName
          in: query
          description: "name of the object with length limit to 1024 characters.\nthis is the unique identifier of the object in the namespace"
          required: true
          schema:
            type: string
        - name: urlExpireDays
          in: query
          description: "expiration time in days for the URL.\nmaximum is 7 days. if set to 0, URL will not expire."
          schema:
            type: integer
            format: int32
        - name: lastModifiedTime
          in: query
          description: "last modified time this value is provided by the client when the object url is created\nit must be in RFC3339 formatted date-time string"
          schema:
            type: string
            format: date-time
        - name: objectExpireDays
          in: query
          description: "object live time in days\nminimum is 1 day. if set to 0, the object will not be deleted automatically"
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectUploadURLResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/object-download-url':
    get:
      tags:
        - üíæ Artifact
      summary: Get Object Download URL
      description: Returns the download URL of an object.
      operationId: GetObjectDownloadURL
      parameters:
        - name: namespaceId
          in: path
          description: id of the namespace
          required: true
          schema:
            type: string
        - name: objectUid
          in: query
          description: uid of the object
          required: true
          schema:
            type: string
        - name: urlExpireDays
          in: query
          description: "expiration time in days for the URL.\nmaximum is 7 days. if set to 0, URL will not expire."
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectDownloadURLResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files:move':
    post:
      tags:
        - üíæ Artifact
      summary: Move file to another catalog
      description: Moves a file to another catalog.
      operationId: MoveFileToCatalog
      parameters:
        - name: namespaceId
          in: path
          description: namespace id
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: catalog id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveFileToCatalogBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveFileToCatalogResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1beta/user:
    get:
      tags:
        - ü™Ü Namespace
      summary: Get the authenticated user
      description: Returns the details of the authenticated user.
      operationId: GetAuthenticatedUser
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthenticatedUserResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    patch:
      tags:
        - ü™Ü Namespace
      summary: Update the authenticated user
      description: "Updates the information of the authenticated user.\n\nIn REST requests, only the supplied user fields will be taken into account\nwhen updating the resource."
      operationId: PatchAuthenticatedUser
      requestBody:
        description: The user fields that will replace the existing ones.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatedUser'
        required: true
        x-bodyName: user
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchAuthenticatedUserResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/users:
    get:
      tags:
        - ü™Ü Namespace
      summary: List users
      description: Returns a paginated list of users.
      operationId: ListUsers
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of users to return. If this parameter is unspecified,\nat most 10 pipelines will be returned. The cap value for this parameter is\n100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/users/{userId}':
    get:
      tags:
        - ü™Ü Namespace
      summary: Get a user
      description: Returns the details of a user by their ID.
      operationId: GetUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/organizations:
    get:
      tags:
        - ü™Ü Namespace
      summary: List organizations
      description: Returns a paginated list of organizations.
      operationId: ListOrganizations
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of organizations to return. If this parameter is\nunspecified, at most 10 pipelines will be returned. The cap value for this\nparameter is 100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    post:
      tags:
        - ü™Ü Namespace
      summary: Create an organization
      description: Creates an organization.
      operationId: CreateOrganization
      requestBody:
        description: The properties of the organization to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
        x-bodyName: organization
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/organizations/{organizationId}':
    get:
      tags:
        - ü™Ü Namespace
      summary: Get an organization
      description: Returns the organization details by its ID.
      operationId: GetOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - ü™Ü Namespace
      summary: Delete an organization
      description: Accesses and deletes an organization by ID.
      operationId: DeleteOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOrganizationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    patch:
      tags:
        - ü™Ü Namespace
      summary: Update an organization
      description: "Accesses and updates an organization by ID.\n\nIn REST requests, only the supplied organization fields will be taken into\naccount when updating the resource."
      operationId: UpdateOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
      requestBody:
        description: The organization fields that will replace the existing ones.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
        x-bodyName: organization
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/users/{userId}/memberships':
    get:
      tags:
        - ü™Ü Namespace
      summary: List user memberships
      description: Returns the memberships of a user.
      operationId: ListUserMemberships
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserMembershipsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/users/{userId}/memberships/{organizationId}':
    get:
      tags:
        - ü™Ü Namespace
      summary: Get a user membership
      description: "Returns the details of the relationship between a user and an\norganization. The authenticated must match the membership parent."
      operationId: GetUserMembership
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserMembershipResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    put:
      tags:
        - ü™Ü Namespace
      summary: Update a user membership
      description: Accesses and updates a user membership by parent and membership IDs.
      operationId: UpdateUserMembership
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
        - name: updateMask
          in: query
          description: "The update mask specifies the subset of fields that should be modified.\n\nFor more information about this field, see\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask."
          required: true
          schema:
            type: string
      requestBody:
        description: The membership fields to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMembership'
        required: true
        x-bodyName: membership
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserMembershipResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - ü™Ü Namespace
      summary: Delete a user membership
      description: Accesses and deletes a user membership by parent and membership IDs.
      operationId: DeleteUserMembership
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserMembershipResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/organizations/{organizationId}/memberships':
    get:
      tags:
        - ü™Ü Namespace
      summary: List organization memberships
      description: Returns a paginated list of the user memberships in an organization.
      operationId: ListOrganizationMemberships
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationMembershipsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/organizations/{organizationId}/memberships/{userId}':
    get:
      tags:
        - ü™Ü Namespace
      summary: Get a an organization membership
      description: Returns the details of a user membership within an organization.
      operationId: GetOrganizationMembership
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationMembershipResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    put:
      tags:
        - ü™Ü Namespace
      summary: Uppdate an organization membership
      description: Updates a user membership within an organization.
      operationId: UpdateOrganizationMembership
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: updateMask
          in: query
          description: "The update mask specifies the subset of fields that should be modified.\n\nFor more information about this field, see\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask."
          required: true
          schema:
            type: string
      requestBody:
        description: The membership fields to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationMembership'
        required: true
        x-bodyName: membership
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationMembershipResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - ü™Ü Namespace
      summary: Delete an organization membership
      description: Deletes a user membership within an organization.
      operationId: DeleteOrganizationMembership
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOrganizationMembershipResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/user/subscription:
    get:
      tags:
        - ü§ù Subscription
      summary: Get the subscription of the authenticated user
      description: Returns the subscription details of the authenticated user.
      operationId: GetAuthenticatedUserSubscription
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthenticatedUserSubscriptionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/organizations/{organizationId}/subscription':
    get:
      tags:
        - ü§ù Subscription
      summary: Get the subscription of an organization
      description: Returns the subscription details of an organization.
      operationId: GetOrganizationSubscription
      parameters:
        - name: organizationId
          in: path
          description: Oragnization ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationSubscriptionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/tokens:
    get:
      tags:
        - ü™Ü Namespace
      summary: List API tokens
      description: Returns a paginated list of the API tokens of the authenticated user.
      operationId: ListTokens
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of tokens to return. If this parameter is unspecified,\nat most 10 pipelines will be returned. The cap value for this parameter is\n100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokensResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    post:
      tags:
        - ü™Ü Namespace
      summary: Create an API token
      description: Creates an API token for the authenticated user.
      operationId: CreateToken
      requestBody:
        description: The properties of the token to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiToken'
        required: true
        x-bodyName: token
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTokenResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/tokens/{tokenId}':
    get:
      tags:
        - ü™Ü Namespace
      summary: Get an API token
      description: Returns the details of an API token.
      operationId: GetToken
      parameters:
        - name: tokenId
          in: path
          description: Token ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - ü™Ü Namespace
      summary: Delete an API token
      description: Deletes an API token.
      operationId: DeleteToken
      parameters:
        - name: tokenId
          in: path
          description: Token ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTokenResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/validate_token:
    post:
      tags:
        - ü™Ü Namespace
      summary: Validate an API token
      description: Validates an API token.
      operationId: ValidateToken
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateTokenResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/credit':
    get:
      tags:
        - ü§ù Subscription
      summary: Get the remaining Instill Credit
      description: "This endpoint returns the remaining [Instill Credit](https://instill-ai.dev/docs/cloud/credit) of a given user or\norganization. The requested credit owner must be either the authenticated\nuser or an organization they belong to.\n\nOn Instill Core, this endpoint will return a 404 Not Found status."
      operationId: GetRemainingCredit
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRemainingCreditResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/check-namespace:
    post:
      tags:
        - ü™Ü Namespace
      summary: Check if a namespace is in use
      description: "Returns the availability of a namespace or, alternatively, the type of\nresource that is using it."
      operationId: CheckNamespace
      requestBody:
        description: "CheckNamespaceRequest represents a request to verify if a namespace is\navailable."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckNamespaceRequest'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckNamespaceResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/pipeline-runs/query-charts:
    get:
      tags:
        - üìä Metrics
      summary: List pipeline trigger time charts
      description: "Returns a timeline of pipline trigger counts for a given requester. The\nresponse will contain one set of records (datapoints), representing the\namount of triggers in a time bucket."
      operationId: ListPipelineTriggerChartRecords
      parameters:
        - name: requesterId
          in: query
          description: The ID of the namespace that requested the pipeline triggers.
          required: true
          schema:
            type: string
        - name: aggregationWindow
          in: query
          description: "Aggregation window. The value is a positive duration string, i.e. a\nsequence of decimal numbers, each with optional fraction and a unit\nsuffix, such as \"300ms\", \"1.5h\" or \"2h45m\".\nThe minimum (and default) window is 1h."
          schema:
            type: string
        - name: start
          in: query
          description: "Beginning of the time range from which the records will be fetched.\nThe default value is the beginning of the current day, in UTC."
          schema:
            type: string
            format: date-time
        - name: stop
          in: query
          description: "End of the time range from which the records will be fetched.\nThe default value is the current timestamp."
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelineTriggerChartRecordsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/model-runs/query-charts:
    get:
      tags:
        - üìä Metrics
      summary: List model trigger time charts
      description: "Returns a timeline of model trigger counts for a given requester. The\nresponse will contain one set of records (datapoints), representing the\namount of triggers in a time bucket."
      operationId: ListModelTriggerChartRecords
      parameters:
        - name: requesterId
          in: query
          description: The ID of the namespace that requested the model triggers.
          required: true
          schema:
            type: string
        - name: aggregationWindow
          in: query
          description: "Aggregation window. The value is a positive duration string, i.e. a\nsequence of decimal numbers, each with optional fraction and a unit\nsuffix, such as \"300ms\", \"1.5h\" or \"2h45m\".\nThe minimum (and default) window is 1h."
          schema:
            type: string
        - name: start
          in: query
          description: "Beginning of the time range from which the records will be fetched.\nThe default value is the beginning of the current day, in UTC."
          schema:
            type: string
            format: date-time
        - name: stop
          in: query
          description: "End of the time range from which the records will be fetched.\nThe default value is the current timestamp."
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelTriggerChartRecordsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/credit/query-charts:
    get:
      tags:
        - üìä Metrics
      summary: List Instill Credit consumption time charts
      description: "Returns a timeline of Instill Credit consumption for a given owner. The\nresponse will contain one set of records (datapoints) per consumption\nsource (e.g. \"pipeline\", \"model\"). Each datapoint represents the amount\nconsumed in a time bucket.\n\nThis endpoint is only exposed on Instill Cloud."
      operationId: ListCreditConsumptionChartRecords
      parameters:
        - name: namespaceId
          in: query
          description: The ID of the namespace that owns the credit.
          required: true
          schema:
            type: string
        - name: aggregationWindow
          in: query
          description: "Aggregation window. The value is a positive duration string, i.e. a\nsequence of decimal numbers, each with optional fraction and a unit\nsuffix, such as \"300ms\", \"1.5h\" or \"2h45m\".\nThe minimum (and default) window is 1h."
          schema:
            type: string
        - name: start
          in: query
          description: "Beginning of the time range from which the records will be fetched.\nThe default value is the beginning of the current day, in UTC."
          schema:
            type: string
            format: date-time
        - name: stop
          in: query
          description: "End of the time range from which the records will be fetched.\nThe default value is the current timestamp."
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCreditConsumptionChartRecordsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1alpha/model-definitions:
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List model definitions
      description: Returns a paginated list of model definitions.
      operationId: ModelPublicService_ListModelDefinitions
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of model definitions to return. If this parameter\nis unspecified, at most 10 definitions will be returned. The cap value for\nthis parameter is 100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelDefinitionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1alpha/available-regions:
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List available regions
      description: Returns a paginated list of available regions.
      operationId: ModelPublicService_ListAvailableRegions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAvailableRegionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/model-definitions/{modelDefinitionId}':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: Get a model definition
      description: Returns the details of a model definition.
      operationId: ModelPublicService_GetModelDefinition
      parameters:
        - name: modelDefinitionId
          in: path
          description: "The resource name of the model definition, which allows its access by ID.\n- Format: `model-definitions/{id}`."
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelDefinitionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1alpha/models:
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListModels
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of models to return. If this parameter is unspecified,\nat most 10 models will be returned. The cap value for this parameter is\n100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired model view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
        - name: showDeleted
          in: query
          description: Include soft-deleted models in the result.
          schema:
            type: boolean
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
        - name: visibility
          in: query
          description: "Limit results to pipelines with the specified visibility.\n\n - VISIBILITY_PRIVATE: Only the owner can see the model.\n - VISIBILITY_PUBLIC: Other users can see the model."
          schema:
            enum:
              - VISIBILITY_PRIVATE
              - VISIBILITY_PUBLIC
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or\n`update_time`. Format: `order_by=id` or `order_by=create_time desc`,\ndefault is `asc`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List namespace models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListNamespaceModels
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: "The maximum number of models to return. If this parameter is unspecified,\nat most 10 models will be returned. The cap value for this parameter is\n100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired model view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
        - name: showDeleted
          in: query
          description: Include soft-deleted models in the result.
          schema:
            type: boolean
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
        - name: visibility
          in: query
          description: "Limit results to pipelines with the specified visibility.\n\n - VISIBILITY_PRIVATE: Only the owner can see the model.\n - VISIBILITY_PUBLIC: Other users can see the model."
          schema:
            enum:
              - VISIBILITY_PRIVATE
              - VISIBILITY_PUBLIC
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or\n`update_time`. Format: `order_by=id` or `order_by=create_time desc`,\ndefault is `asc`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespaceModelsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    post:
      tags:
        - ‚öóÔ∏è Model
      summary: Create a new model
      description: "Creates a new model under the parenthood of a namespace. This is an\nasynchronous endpoint, i.e., the server will not wait for the model to be\ncreated in order to respond. Instead, it will return a response with the\nnecessary information to access the result and status of the creation\noperation."
      operationId: ModelPublicService_CreateNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
      requestBody:
        description: The properties of the model to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        required: true
        x-bodyName: model
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: Get a model
      description: 'Returns the detail of a model, accessing it by the model ID and its parent namespace.'
      operationId: ModelPublicService_GetNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired model view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    delete:
      tags:
        - ‚öóÔ∏è Model
      summary: Delete a model
      description: "Deletes a model, accesing it by its resource name, which is defined by the\nparent namespace and the ID of the model."
      operationId: ModelPublicService_DeleteNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
    patch:
      tags:
        - ‚öóÔ∏è Model
      summary: Update a model
      description: "Updates a model, accessing it by its resource name, which is defined by\nthe parent namespace and the ID of the model.\n\nIn REST requests, only the supplied model fields will be taken into\naccount when updating the resource."
      operationId: ModelPublicService_UpdateNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
      requestBody:
        description: The model to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        required: true
        x-bodyName: model
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/rename':
    post:
      tags:
        - ‚öóÔ∏è Model
      summary: Rename a model
      description: "Renames a model, accesing it by its resource name, which is defined by the\nparent namespace and the ID of the model."
      operationId: ModelPublicService_RenameNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameNamespaceModelBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenameNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/watch':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: Watch the state of a model version
      description: "Returns the state of a model. The model resource allocation and scaling actions take some\ntime, during which a model will be in various state. This endpoint\nallows clients to track the state."
      operationId: ModelPublicService_WatchNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: Model version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/watch':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: Watch the state of the latest model version
      description: "Returns the state of the latest model version. The model resource allocation and scaling actions\ntake some time, during which a model will be in various state. This endpoint\nallows clients to track the state."
      operationId: ModelPublicService_WatchNamespaceLatestModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchNamespaceLatestModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/versions':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List namespace model versions
      description: "Returns a paginated list of version of a model namespace that belong to the specified namespace.\nContains model version and digest."
      operationId: ModelPublicService_ListNamespaceModelVersions
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: "The maximum number of versions to return. The default and cap values are 10\nand 100, respectively."
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page number.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespaceModelVersionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}':
    delete:
      tags:
        - ‚öóÔ∏è Model
      summary: Delete a model version
      description: "Deletes a model version, accesing it by its resource name, which is defined by the\nparent namespace and the ID of the model, and version."
      operationId: ModelPublicService_DeleteNamespaceModelVersion
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: Model version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespaceModelVersionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger':
    post:
      tags:
        - ‚öóÔ∏è Model
      summary: Trigger model inference
      description: "Triggers a deployed model to infer the result of a set of task or\nquestions."
      operationId: ModelPublicService_TriggerNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: Model version
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerNamespaceModelBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger-async':
    post:
      tags:
        - ‚öóÔ∏è Model
      summary: Trigger model inference asynchronously
      description: "Triggers a deployed model to infer the result of a set of task or\nquestions."
      operationId: ModelPublicService_TriggerAsyncNamespaceModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: Model version
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAsyncNamespaceModelBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerAsyncNamespaceModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger':
    post:
      tags:
        - ‚öóÔ∏è Model
      summary: Trigger model inference
      description: "Triggers the latest deployed model version to infer the result of a set of task or\nquestions."
      operationId: ModelPublicService_TriggerNamespaceLatestModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerNamespaceLatestModelBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerNamespaceLatestModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger-async':
    post:
      tags:
        - ‚öóÔ∏è Model
      summary: Trigger model inference asynchronously
      description: "Triggers the latest deployed model version to infer the result of a set of task or\nquestions."
      operationId: ModelPublicService_TriggerAsyncNamespaceLatestModel
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAsyncNamespaceLatestModelBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerAsyncNamespaceLatestModelResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/operation':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: "Get the details of the long-running operation from a namespace model\nwith a particular version"
      description: "This method allows requesters to request the status and outcome of\nlong-running operations in a model, such as trigger."
      operationId: ModelPublicService_GetNamespaceModelOperation
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: Model version
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired operation result in the\nresponse.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceModelOperationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/operation':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: Get the details of the latest long-running operation from a namespace model
      description: "This method allows requesters to request the status and outcome of\nlong-running operations in a model, such as trigger."
      operationId: ModelPublicService_GetNamespaceLatestModelOperation
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired operation result in the\nresponse.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceLatestModelOperationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/operations/{operationId}':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: Get the details of a long-running operation
      description: "This method allows requesters to request the status and outcome of\nlong-running operations in a model, such as trigger."
      operationId: ModelPublicService_GetModelOperation
      parameters:
        - name: operationId
          in: path
          description: 'The resource name of the model, which allows its access ID.'
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired model view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelOperationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  '/v1alpha/namespaces/{namespaceId}/models/{modelId}/runs':
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List Model Runs
      description: "Returns a paginated list of runs for a given model. When the requester is\nthe owner of the model, they will be able to all the model runs,\nregardless who requested the trigger (the view will be partial to hide\nsensitive data like e.g. the trigger input and output). Other requesters\nwill only be able to see the runs requested by themselves."
      operationId: ModelPublicService_ListModelRuns
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID.
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: "The maximum number of runs to return. The default and cap values are 10\nand 100, respectively."
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page number.
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          description: "Sort the results by the given expression.\nFormat: `field [ASC | DESC], where `field` can be:\n- `create_time`\n- `update_time`\nBy default, results are sorted by descending creation time."
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`.\nThe filter can be applied to the following fields:\n- `create_time`"
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelRunsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1alpha/dashboard/models/runs:
    get:
      tags:
        - ‚öóÔ∏è Model
      summary: List Model Runs By Requester
      description: "Returns a paginated list of runs requested by a namespace. The response\nmay contain runs from several models."
      operationId: ModelPublicService_ListModelRunsByRequester
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of runs to return. The default and cap values are 10\nand 100, respectively."
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page number.
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          description: "Sort the results by the given expression.\nFormat: `field [ASC | DESC], where `field` can be:\n- `create_time`\n- `update_time`\nBy default, results are sorted by descending creation time."
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `status=\"RUN_STATUS_COMPLETED\"`.\nThe filter can be applied to the following fields:\n- `status`\n- `source`"
          schema:
            type: string
        - name: start
          in: query
          description: "Beginning of the time range from which the records will be fetched.\nThe default value is the beginning of the current day, in UTC."
          schema:
            type: string
            format: date-time
        - name: stop
          in: query
          description: "End of the time range from which the records will be fetched.\nThe default value is the current timestamp."
          schema:
            type: string
            format: date-time
        - name: requesterId
          in: query
          description: Requester ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelRunsByRequesterResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: alpha
  /v1beta/pipelines:
    get:
      tags:
        - üíß Pipeline
      summary: List accessible pipelines
      description: Returns a paginated list of pipelines that are visible to the requester.
      operationId: PipelinePublicService_ListPipelines
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of pipelines to return. If this parameter is\nunspecified, at most 10 pipelines will be returned. The cap value for this\nparameter is 100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired pipeline view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
              - VIEW_RECIPE
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`.\n- Example:\n`recipe.components.definition_name:\"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3\"`."
          schema:
            type: string
        - name: showDeleted
          in: query
          description: Include soft-deleted pipelines in the result.
          schema:
            type: boolean
        - name: visibility
          in: query
          description: "Limit results to pipelines with the specified visibility.\n\n - VISIBILITY_PRIVATE: Only the user can see the pipeline.\n - VISIBILITY_PUBLIC: Other users can see the pipeline."
          schema:
            enum:
              - VISIBILITY_PRIVATE
              - VISIBILITY_PUBLIC
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or `update_time`.\nFormat: `order_by=id` or `order_by=create_time desc`, default is `asc`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelinesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines':
    get:
      tags:
        - üíß Pipeline
      summary: List namespace pipelines
      description: Returns a paginated list of pipelines of a namespace
      operationId: PipelinePublicService_ListNamespacePipelines
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: "The maximum number of pipelines to return. If this parameter is\nunspecified, at most 10 pipelines will be returned. The cap value for this\nparameter is 100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired pipeline view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
              - VIEW_RECIPE
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`.\n- Example:\n`recipe.components.definition_name:\"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3\"`."
          schema:
            type: string
        - name: showDeleted
          in: query
          description: Include soft-deleted pipelines in the result.
          schema:
            type: boolean
        - name: visibility
          in: query
          description: "Limit results to pipelines with the specified visibility.\n\n - VISIBILITY_PRIVATE: Only the user can see the pipeline.\n - VISIBILITY_PUBLIC: Other users can see the pipeline."
          schema:
            enum:
              - VISIBILITY_PRIVATE
              - VISIBILITY_PUBLIC
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or `update_time`.\nFormat: `order_by=id` or `order_by=create_time desc`, default is `asc`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacePipelinesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    post:
      tags:
        - üíß Pipeline
      summary: Create a new pipeline
      description: Creates a new pipeline under a namespace.
      operationId: PipelinePublicService_CreateNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: The namespace that creates the pipeline.
          required: true
          schema:
            type: string
      requestBody:
        description: The properties of the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
        x-bodyName: pipeline
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}':
    get:
      tags:
        - üíß Pipeline
      summary: Get a pipeline
      description: Returns the details of a pipeline.
      operationId: PipelinePublicService_GetNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired pipeline view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
              - VIEW_RECIPE
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - üíß Pipeline
      summary: Delete a pipeline
      description: "Deletes a pipeline, accesing it by its resource name, which is defined by\nthe parent namespace and the ID of the pipeline. The authenticated namespace must be\nthe parent of the pipeline in order to delete it."
      operationId: PipelinePublicService_DeleteNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    patch:
      tags:
        - üíß Pipeline
      summary: Update a pipeline
      description: "Udpates a pipeline, accessing it by its resource name, which is defined by\nthe parent namespace and the ID of the pipeline. The authenticated namespace must be\nthe parent of the pipeline in order to modify it.\n\nIn REST requests, only the supplied pipeline fields will be taken into\naccount when updating the resource."
      operationId: PipelinePublicService_UpdateNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        description: The pipeline fields that will replace the existing ones.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
        x-bodyName: pipeline
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/validate':
    post:
      tags:
        - üíß Pipeline
      summary: Validate a pipeline
      description: "Validates a pipeline by its resource name, which is defined by the parent\nnamespace and the ID of the pipeline.\n\nValidation checks the recipe of the pipeline and the status of its components."
      operationId: PipelinePublicService_ValidateNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateNamespacePipelineBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/rename':
    post:
      tags:
        - üíß Pipeline
      summary: Rename a pipeline
      description: "Updates the ID of a pipeline. Since this is an output-only field, a custom\nmethod is required to modify it.\n\nThe pipeline name will be updated accordingly, as it is  composed by the\nparent namespace and ID of the pipeline (e.g.\n`namespaces/luigi/pipelines/pizza-recipe-generator`).\n\nThe authenticated namespace must be the parent of the pipeline in order to\nperform this action."
      operationId: PipelinePublicService_RenameNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameNamespacePipelineBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenameNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/clone':
    post:
      tags:
        - üíß Pipeline
      summary: Clone a pipeline
      description: "Clones a pipeline owned by a namespace. The new pipeline may have a different\nparent, and this can be either a namespace or an organization."
      operationId: PipelinePublicService_CloneNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneNamespacePipelineBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger':
    post:
      tags:
        - üíß Pipeline
      summary: Trigger a pipeline
      description: "Triggers the execution of a pipeline synchronously, i.e., the result is\nsent back to the namespace right after the data is processed. This method is\nintended for real-time inference when low latency is of concern.\n\nThe pipeline is identified by its resource name, formed by the parent namespace\nand ID of the pipeline.\n\nFor more information, see [Run NamespacePipeline](https://instill-ai.dev/docs/pipeline/run-pipeline)."
      operationId: PipelinePublicService_TriggerNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerNamespacePipelineBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger-stream':
    post:
      tags:
        - üíß Pipeline
      summary: Trigger a pipeline via streaming
      description: "Triggers the execution of a pipeline asynchronously and streams back the response.\nThis method is intended for real-time inference when low latency is of concern\nand the response needs to be processed incrementally.\n\nThe pipeline is identified by its resource name, formed by the parent namespace\nand ID of the pipeline."
      operationId: PipelinePublicService_TriggerNamespacePipelineWithStream
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerNamespacePipelineWithStreamBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                title: Stream result of TriggerNamespacePipelineWithStreamResponse
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/TriggerNamespacePipelineWithStreamResponse'
                  error:
                    $ref: '#/components/schemas/rpc.Status'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger-async':
    post:
      tags:
        - üíß Pipeline
      summary: Trigger a pipeline asynchronously
      description: "Triggers the execution of a pipeline asynchronously, i.e., the result\ncontains the necessary information to access the result and status of the\noperation. This method is intended for cases that require long-running\nworkloads.\n\nThe pipeline is identified by its resource name, formed by the parent namespace\nand ID of the pipeline.\n\nFor more information, see [Run NamespacePipeline](https://instill-ai.dev/docs/pipeline/run-pipeline)."
      operationId: PipelinePublicService_TriggerAsyncNamespacePipeline
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAsyncNamespacePipelineBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerAsyncNamespacePipelineResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases':
    get:
      tags:
        - üíß Pipeline
      summary: List the releases in a pipeline
      description: "Lists the commited versions of a pipeline, identified by its resource\nname, which is formed by the parent namespace and ID of the pipeline."
      operationId: PipelinePublicService_ListNamespacePipelineReleases
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: "The maximum number of releases to return. If this parameter is\nunspecified, at most 10 pipelines will be returned. The cap value for this\nparameter is 100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page token.
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired pipeline view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
              - VIEW_RECIPE
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
        - name: showDeleted
          in: query
          description: Include soft-deleted pipelines in the result.
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacePipelineReleasesResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    post:
      tags:
        - üíß Pipeline
      summary: Create a pipeline release
      description: "Commits the version of a pipeline, identified by its resource name, which\nis formed by the parent namespace and ID of the pipeline.\n\nThe authenticated namespace must be the parent of the pipeline in order to\nperform this action."
      operationId: PipelinePublicService_CreateNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        description: The release information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineRelease'
        required: true
        x-bodyName: release
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}':
    get:
      tags:
        - üíß Pipeline
      summary: Get a pipeline release
      description: "Gets the details of a pipeline release, where the pipeline is identified\nby its resource name, formed by its parent namespace and ID."
      operationId: PipelinePublicService_GetNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: Release ID
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired pipeline view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
              - VIEW_RECIPE
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - üíß Pipeline
      summary: Delete a pipeline release
      description: "Deletes a pipeline release, where the pipeline is identified by its\nresource name, formed by its parent namespace and ID.\n\nThe authenticated namespace must be the parent of the pipeline in order to\nperform this action."
      operationId: PipelinePublicService_DeleteNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: Release ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    patch:
      tags:
        - üíß Pipeline
      summary: Update a pipeline release
      description: "Updates the details of a pipeline release, where the pipeline is\nidentified by its resource name, formed by its parent namespace and ID.\n\nThe authenticated namespace must be the parent of the pipeline in order to\nperform this action."
      operationId: PipelinePublicService_UpdateNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: Release ID
          required: true
          schema:
            type: string
      requestBody:
        description: "The pipeline release fields that will replace the existing ones.\nA pipeline release resource to update"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineRelease'
        required: true
        x-bodyName: release
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/clone':
    post:
      tags:
        - üíß Pipeline
      summary: Clone a pipeline release
      description: "Clones a pipeline release owned by a namespace. The new pipeline may have a different\nparent, and this can be either a namespace or an organization."
      operationId: PipelinePublicService_CloneNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: Release ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneNamespacePipelineReleaseBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/trigger':
    post:
      tags:
        - üíß Pipeline
      summary: Trigger a pipeline release
      description: "Triggers the synchronous execution of of a pipeline. While the trigger\nendpoint (where the release version isn't specified) triggers the pipeline\nat its latest release, this method allows the client to specified any\ncommitted release.\n\nThe pipeline is identified by its resource name, formed by its parent namespace\nand ID."
      operationId: PipelinePublicService_TriggerNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: Release ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerNamespacePipelineReleaseBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/trigger-async':
    post:
      tags:
        - üíß Pipeline
      summary: Trigger a pipeline release asynchronously
      description: "Triggers the asynchronous execution of of a pipeline. While the trigger\nendpoint (where the release version isn't specified) triggers the pipeline\nat its latest release, this method allows the client to specified any\ncommitted release.\n\nThe pipeline is identified by its resource name, formed by its parent namespace\nand ID."
      operationId: PipelinePublicService_TriggerAsyncNamespacePipelineRelease
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: Release ID
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAsyncNamespacePipelineReleaseBody'
        required: true
        x-bodyName: body
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerAsyncNamespacePipelineReleaseResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/secrets':
    get:
      tags:
        - üíß Pipeline
      summary: List secrets
      description: "Returns a paginated list of secrets that belong to the specified\nnamespace."
      operationId: PipelinePublicService_ListNamespaceSecrets
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: "The maximum number of secrets to return. If this parameter is unspecified,\nat most 10 pipelines will be returned. The cap value for this parameter is\n100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: Page secret.
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespaceSecretsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    post:
      tags:
        - üíß Pipeline
      summary: Create a secret
      description: Creates a new secret under the parenthood of an namespace.
      operationId: PipelinePublicService_CreateNamespaceSecret
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
      requestBody:
        description: The properties of the secret to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
        x-bodyName: secret
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespaceSecretResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/secrets/{secretId}':
    get:
      tags:
        - üíß Pipeline
      summary: Get a secret
      description: "Returns the details of an namespace-owned secret by its resource name,\nwhich is defined by the parent namespace and the ID of the secret."
      operationId: PipelinePublicService_GetNamespaceSecret
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: secretId
          in: path
          description: Secret ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceSecretResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - üíß Pipeline
      summary: Delete a secret
      description: "Deletes a secret, accesing it by its resource name, which is defined by\nthe parent namespace and the ID of the secret."
      operationId: PipelinePublicService_DeleteNamespaceSecret
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: secretId
          in: path
          description: Secret ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespaceSecretResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    patch:
      tags:
        - üíß Pipeline
      summary: Update a secret
      description: "Udpates a secret, accessing it by its resource name, which is defined by\n\nIn REST requests, only the supplied secret fields will be taken into\naccount when updating the resource."
      operationId: PipelinePublicService_UpdateNamespaceSecret
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID
          required: true
          schema:
            type: string
        - name: secretId
          in: path
          description: Secret ID
          required: true
          schema:
            type: string
      requestBody:
        description: The secret fields to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
        x-bodyName: secret
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNamespaceSecretResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/component-definitions:
    get:
      tags:
        - üíß Pipeline
      summary: List component definitions
      description: "Returns a paginated list of component definitions, regardless their type.\nThis offers a single source of truth, with pagination and filter\ncapabilities, for the components that might be used in a pipeline."
      operationId: PipelinePublicService_ListComponentDefinitions
      parameters:
        - name: pageSize
          in: query
          description: "The maximum number of component definitions to return. If this parameter\nis unspecified, at most 10 definitions will be returned. The cap value for\nthis parameter is 100 (i.e. any value above that will be coerced to 100)."
          schema:
            type: integer
            format: int32
        - name: view
          in: query
          description: "View allows clients to specify the desired resource view in the response.\n\n - VIEW_BASIC: Default view, only includes basic information (removes the `spec`\nfield).\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `component_type=\"COMPONENT_TYPE_AI\"`.\n- Example: `tasks:\"TASK_TEXT_GENERATION\"`."
          schema:
            type: string
        - name: page
          in: query
          description: Page number.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentDefinitionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/operations/{operationId}':
    get:
      tags:
        - üíß Pipeline
      summary: Get the details of a long-running operation
      description: "This method allows requesters to request the status and outcome of\nlong-running operations such as asynchronous pipeline triggers."
      operationId: PipelinePublicService_GetOperation
      parameters:
        - name: operationId
          in: path
          description: "The name of the operation resource. Asynchronous methods will contain this\ninformation in their response."
          required: true
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/runs':
    get:
      tags:
        - üíß Pipeline
      summary: List Pipeline Runs
      description: "Returns a paginated list of runs for a given pipeline. When the requester\nis the owner of the pipeline, they will be able to all the pipeline runs,\nregardless who requested the trigger (the view will be partial to hide\nsensitive data like e.g. the trigger input and output). Other requesters\nwill only be able to see the runs requested by themselves."
      operationId: PipelinePublicService_ListPipelineRuns
      parameters:
        - name: namespaceId
          in: path
          description: The ID of the owner of the pipeline.
          required: true
          schema:
            type: string
        - name: pipelineId
          in: path
          description: The ID of the pipeline for which the runs will be listed.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: "The maximum number of items per page to return. The default and cap values\nare 10 and 100, respectively."
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or `update_time`.\nFormat: `order_by=id` or `order_by=create_time desc`, default is `asc`."
          schema:
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelineRunsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/pipeline-runs/{pipelineRunId}/component-runs':
    get:
      tags:
        - üíß Pipeline
      summary: List Component Runs
      description: Returns the information of each component execution within a pipeline run.
      operationId: PipelinePublicService_ListComponentRuns
      parameters:
        - name: pipelineRunId
          in: path
          description: The unique identifier of the pipeline run to list component runs for.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: "The maximum number of items per page to return. The default and cap values\nare 10 and 100, respectively."
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\n- Example: `create_time>timestamp(\"2000-06-19T23:31:08.657Z\")`."
          schema:
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or `update_time`.\nFormat: `order_by=id` or `order_by=create_time desc`, default is `asc`."
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired run view in the response.\nThe basic view excludes input / output data.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
              - VIEW_RECIPE
            type: string
        - name: Instill-Requester-Uid
          in: header
          description: 'Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to'
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentRunsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/dashboard/pipelines/runs:
    get:
      tags:
        - üíß Pipeline
      summary: List Pipeline Runs By Requester
      description: "Returns a paginated list of runs for requested by a namespace. The\nresponse may contain runs from several pipelines."
      operationId: PipelinePublicService_ListPipelineRunsByRequester
      parameters:
        - name: page
          in: query
          description: The page number to retrieve.
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: "The maximum number of items per page to return. The default and cap values\nare 10 and 100, respectively."
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter\nexpression.\nThe following filters are supported:\n- `status`\n- `source`\n\n**Example**: `status=\"RUN_STATUS_COMPLETED\"`."
          schema:
            type: string
        - name: orderBy
          in: query
          description: "Order by field, with options for ordering by `id`, `create_time` or `update_time`.\nFormat: `order_by=id` or `order_by=create_time desc`, default is `asc`."
          schema:
            type: string
        - name: start
          in: query
          description: "Beginning of the time range from which the records will be fetched.\nThe default value is the beginning of the current day, in UTC."
          schema:
            type: string
            format: date-time
        - name: stop
          in: query
          description: "End of the time range from which the records will be fetched.\nThe default value is the current timestamp."
          schema:
            type: string
            format: date-time
        - name: requesterId
          in: query
          description: Requester ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelineRunsByRequesterResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/connections':
    get:
      tags:
        - üíß Pipeline
      summary: List namespace connections
      description: Returns a paginated list of connections created by a namespace.
      operationId: PipelinePublicService_ListNamespaceConnections
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: 'The maximum number of items to return. The default and cap values are 10 and 100, respectively.'
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: 'Page token. By default, the first page will be returned.'
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.\nThe following filters are supported:\n- `integrationId`\n- `qConnection` (fuzzy search on connection ID, integration title or vendor)\n\n**Examples**:\n- List connections where app name, vendor or connection ID match `googl`: `q=\"googl\"`.\n- List connections where the component type is `openai` (e.g. to setup a connector within a pipeline): `integrationId=\"openai\"`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespaceConnectionsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    post:
      tags:
        - üíß Pipeline
      summary: Create a connection
      description: Creates a connection under the ownership of a namespace.
      operationId: PipelinePublicService_CreateNamespaceConnection
      parameters:
        - name: namespaceId
          in: path
          description: ID of the namespace that owns the connection.
          required: true
          schema:
            type: string
      requestBody:
        description: Properties of the connection to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
        required: true
        x-bodyName: connection
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespaceConnectionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/connections/{connectionId}':
    get:
      tags:
        - üíß Pipeline
      summary: Get a namespace connection
      description: Returns the details of a connection.
      operationId: PipelinePublicService_GetNamespaceConnection
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: Connection ID.
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired view in the response.\n\n - VIEW_BASIC: Default view.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceConnectionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    delete:
      tags:
        - üíß Pipeline
      summary: Delete a connection
      description: Deletes a connection.
      operationId: PipelinePublicService_DeleteNamespaceConnection
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: Connection ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespaceConnectionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
    patch:
      tags:
        - üíß Pipeline
      summary: Update a connection
      description: Updates a connection with the supplied connection fields.
      operationId: PipelinePublicService_UpdateNamespaceConnection
      parameters:
        - name: namespaceId
          in: path
          description: ID of the namespace that owns the connection.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: 'ID of the connection to be updated, as present in the database.'
          required: true
          schema:
            type: string
      requestBody:
        description: "Connection object with the new properties to be updated. Immutable and\noutput-only fields will be ignored. The Setup property must be updated\nin block (no partial update is supported)."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
        required: true
        x-bodyName: connection
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNamespaceConnectionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/connections/{connectionId}/test':
    post:
      tags:
        - üíß Pipeline
      summary: Test a connection
      description: "Makes a request to the 3rd party app that the connection is configured to\ncommunicate with, and checks the result of the call. If the test fails,\nthe response status and error message will provide more information about\nthe failure.\n\nNote that this action might affect the quota or billing of the integrated\naccount in the 3rd party app."
      operationId: PipelinePublicService_TestNamespaceConnection
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: Connection ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestNamespaceConnectionResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/namespaces/{namespaceId}/connections/{connectionId}/referenced-pipelines':
    get:
      tags:
        - üíß Pipeline
      summary: List pipelines that reference a connection
      description: "Returns a paginated list with the IDs of the pipelines that reference a\ngiven connection. All the pipelines will belong to the same namespace as\nthe connection."
      operationId: PipelinePublicService_ListPipelineIDsByConnectionID
      parameters:
        - name: namespaceId
          in: path
          description: Namespace ID.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: Connection ID.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: 'The maximum number of items to return. The default and cap values are 10 and 100, respectively.'
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: 'Page token. By default, the first page will be returned.'
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.\nThe following filters are supported:\n- `q` (fuzzy search on pipeline ID)"
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelineIDsByConnectionIDResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  /v1beta/integrations:
    get:
      tags:
        - üíß Pipeline
      summary: List integrations
      description: Returns a paginated list of available integrations.
      operationId: PipelinePublicService_ListIntegrations
      parameters:
        - name: pageSize
          in: query
          description: 'The maximum number of items to return. The default and cap values are 10 and 100, respectively.'
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: 'Page token. By default, the first page will be returned.'
          schema:
            type: string
        - name: filter
          in: query
          description: "Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.\nThe following filters are supported:\n- `qIntegration` (fuzzy search on title or vendor)\n\n**Examples**:\n- List integrations where app name or vendor match `googl`: `q=\"googl\"`."
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
  '/v1beta/integrations/{integrationId}':
    get:
      tags:
        - üíß Pipeline
      summary: Get an integration
      description: Returns the details of an integration.
      operationId: PipelinePublicService_GetIntegration
      parameters:
        - name: integrationId
          in: path
          description: Integration ID.
          required: true
          schema:
            type: string
        - name: view
          in: query
          description: "View allows clients to specify the desired view in the response.\n\n - VIEW_BASIC: Default view.\n - VIEW_FULL: Full representation."
          schema:
            enum:
              - VIEW_BASIC
              - VIEW_FULL
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponse'
        '401':
          description: Returned when the client credentials are not valid.
          content:
            application/json:
              schema: { }
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpc.Status'
      x-stage: beta
components:
  schemas:
    Any:
      type: object
      properties:
        '@type':
          type: string
          description: "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
      additionalProperties: { }
      description: "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    ApiToken:
      type: object
      properties:
        lastUseTime:
          type: string
          description: "When users trigger a pipeline which uses an API token, the token is\nupdated with the current time. This field is used to track the last time\nthe token was used."
          format: date-time
        name:
          type: string
          description: "The name of the token, define by its ID.\n- Format: `tokens/{token.id}`."
          readOnly: true
        uid:
          type: string
          description: API token UUID.
          readOnly: true
        id:
          type: string
          description: "API token resource ID (used in `name` as the last segment). This conforms\nto RFC-1034, which restricts to letters, numbers, and hyphen, with the\nfirst character a letter, the last a letter or a number, and a 63\ncharacter maximum.\n\nThis field can reflect the client(s) that will use the token."
        createTime:
          type: string
          description: Creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Update time.
          format: date-time
          readOnly: true
        accessToken:
          type: string
          description: "An opaque access token representing the API token string.\n\nTo validate the token, the recipient of the token needs to call the server\nthat issued the token."
          readOnly: true
        state:
          allOf:
            - $ref: '#/components/schemas/ApiToken.State'
          description: State.
          readOnly: true
        tokenType:
          type: string
          description: Token type. Value is fixed to "Bearer".
          readOnly: true
        ttl:
          type: integer
          description: The time-to-live in seconds for this resource.
          format: int32
        expireTime:
          type: string
          description: Expiration time.
          format: date-time
      description: API tokens allow users to make requests to the Instill AI API.
    ApiToken.State:
      enum:
        - STATE_INACTIVE
        - STATE_ACTIVE
        - STATE_EXPIRED
      type: string
      description: "State describes the state of an API token.\n\n - STATE_INACTIVE: Inactive.\n - STATE_ACTIVE: Active.\n - STATE_EXPIRED: Expired."
    AuthenticatedUser:
      required:
        - id
        - email
        - newsletterSubscription
      type: object
      properties:
        name:
          type: string
          description: "The name of the user, defined by its ID.\n- Format: `users/{user.id}`."
          readOnly: true
        uid:
          type: string
          description: "User UUID. This field is optionally set by users on creation (it will be\nserver-generated if unspecified)."
        id:
          type: string
          description: "Resource ID (used in `name` as the last segment). This conforms to\nRFC-1034, which restricts to letters, numbers, and hyphen, with the first\ncharacter a letter, the last a letter or a number, and a 63 character\nmaximum.\n\nNote that the ID can be updated."
        createTime:
          type: string
          description: Creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Update time.
          format: date-time
          readOnly: true
        email:
          type: string
          description: Email.
        customerId:
          type: string
          description: Stripe customer ID. This field is used in Instill Cloud.
          readOnly: true
        role:
          type: string
          description: "Role.\n\nIt must be one of the following allowed roles:\n- `manager`\n- `ai-researcher`\n- `ai-engineer`\n- `data-engineer`\n- `data-scientist`\n- `analytics-engineer`\n- `hobbyist`"
        newsletterSubscription:
          type: boolean
          description: This defines whether the user is subscribed to Instill AI's newsletter.
        cookieToken:
          type: string
          description: Console cookie token.
        onboardingStatus:
          allOf:
            - $ref: '#/components/schemas/OnboardingStatus'
          description: Onboarding Status.
        profile:
          allOf:
            - $ref: '#/components/schemas/UserProfile'
          description: Profile.
          readOnly: true
      description: "AuthenticatedUser contains the information of an authenticated user, i.e.,\nthe public user information plus some fields that should only be accessed by\nthe user themselves."
    BindChatTableBody:
      required:
        - tableUid
      type: object
      properties:
        tableUid:
          type: string
          description: The UID of the table to bind to the chat.
      description: BindChatTableRequest represents a request to bind a table to a chat.
    BindChatTableResponse:
      type: object
      description: BindChatTableResponse is an empty response for binding a table to a chat.
    BooleanCell:
      type: object
      properties:
        userInput:
          type: boolean
          description: The value of the cell that directly set by the user.
        computedValue:
          type: boolean
          description: The value of the cell that was computed by the automatic computation.
          readOnly: true
      description: BooleanCell represents a cell with a boolean value.
    CallResponse:
      title: CallResponse represents a response for model inference
      type: object
      properties:
        taskOutputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
    Catalog:
      required:
        - catalogId
      type: object
      properties:
        catalogUid:
          type: string
          description: The catalog uid.
        catalogId:
          type: string
          description: The catalog id.
        name:
          type: string
          description: The catalog name.
        description:
          type: string
          description: The catalog description.
        createTime:
          type: string
          description: The creation time of the catalog.
        updateTime:
          type: string
          description: The last update time of the catalog.
        ownerName:
          type: string
          description: The owner/namespace of the catalog.
        tags:
          type: array
          items:
            type: string
          description: The catalog tags.
        convertingPipelines:
          type: array
          items:
            type: string
          description: The catalog converting pipelines.
        splittingPipelines:
          type: array
          items:
            type: string
          description: The catalog splitting pipelines.
        embeddingPipelines:
          type: array
          items:
            type: string
          description: The catalog embedding pipelines.
        downstreamApps:
          title: The downstream apps
          type: array
          items:
            type: string
        totalFiles:
          type: integer
          description: The total files in catalog.
          format: int64
        totalTokens:
          type: integer
          description: The total tokens in catalog.
          format: int64
        usedStorage:
          type: string
          description: The current used storage in catalog.
          format: uint64
        summarizingPipelines:
          type: array
          items:
            type: string
          description: The catalog summarizing pipelines.
      description: Catalog represents a catalog.
    CatalogInfo:
      type: object
      properties:
        fileCount:
          type: integer
          description: The number of files in the catalog.
          format: int32
          readOnly: true
        totalSizeBytes:
          type: string
          description: The total size of all files in the catalog in bytes.
          format: int64
          readOnly: true
      description: CatalogInfo contains the information about the catalog.
    CatalogRun:
      type: object
      properties:
        uid:
          type: string
          description: Unique identifier for each run.
          readOnly: true
        catalogUid:
          title: catalog uid
          type: string
          readOnly: true
        fileUids:
          type: array
          items:
            type: string
          description: The file uids.
          readOnly: true
        action:
          allOf:
            - $ref: '#/components/schemas/CatalogRunAction'
          description: Action of the catalog run.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
          description: Current status of the run.
          readOnly: true
        source:
          allOf:
            - $ref: '#/components/schemas/RunSource'
          description: Origin of the run.
          readOnly: true
        totalDuration:
          type: integer
          description: Time taken to complete the run in milliseconds.
          format: int32
          readOnly: true
        runnerId:
          title: Runner ID. (User UID)
          type: string
          readOnly: true
        namespaceId:
          type: string
          description: Namespace ID.
          readOnly: true
        payload:
          type: object
          description: Run request payload.
          readOnly: true
        startTime:
          type: string
          description: Time when the run started execution.
          format: date-time
          readOnly: true
        completeTime:
          type: string
          description: Time when the run completed.
          format: date-time
          readOnly: true
        error:
          type: string
          description: Error message if the run failed.
          readOnly: true
        creditAmount:
          type: number
          description: Credits used of internal accounting metric.
          format: float
          readOnly: true
      description: CatalogRun represents a single execution of a catalog action.
    CatalogRunAction:
      enum:
        - CATALOG_RUN_ACTION_CREATE
        - CATALOG_RUN_ACTION_UPDATE
        - CATALOG_RUN_ACTION_DELETE
        - CATALOG_RUN_ACTION_CREATE_FILE
        - CATALOG_RUN_ACTION_PROCESS_FILE
        - CATALOG_RUN_ACTION_DELETE_FILE
      type: string
      description: "CatalogRunAction describes the actions a user has over a catalog.\n\n - CATALOG_RUN_ACTION_CREATE: Create catalog.\n - CATALOG_RUN_ACTION_UPDATE: Update catalog.\n - CATALOG_RUN_ACTION_DELETE: Delete catalog.\n - CATALOG_RUN_ACTION_CREATE_FILE: Upload catalog file.\n - CATALOG_RUN_ACTION_PROCESS_FILE: Process catalog file.\n - CATALOG_RUN_ACTION_DELETE_FILE: Delete catalog file."
    CatalogType:
      title: Catalog Type. e.g. "persistent" or "ephemeral"
      enum:
        - CATALOG_TYPE_PERSISTENT
        - CATALOG_TYPE_EPHEMERAL
      type: string
      description: "- CATALOG_TYPE_PERSISTENT: PERSISTENT\n - CATALOG_TYPE_EPHEMERAL: EPHEMERAL"
    Cell:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the cell.
          readOnly: true
        columnUid:
          type: string
          description: The unique identifier of the column this cell belongs to.
          readOnly: true
        rowUid:
          type: string
          description: The row that this cell belongs to.
          readOnly: true
        updateTime:
          type: string
          description: The timestamp when the cell was last updated.
          format: date-time
          readOnly: true
        type:
          allOf:
            - $ref: '#/components/schemas/.Type'
          description: The type of the cell's value.
          readOnly: true
        stringValue:
          allOf:
            - $ref: '#/components/schemas/StringCell'
          description: The value of the cell as a string.
        numberValue:
          allOf:
            - $ref: '#/components/schemas/NumberCell'
          description: The value of the cell as a number.
        booleanValue:
          allOf:
            - $ref: '#/components/schemas/BooleanCell'
          description: The value of the cell as a boolean.
        fileValue:
          allOf:
            - $ref: '#/components/schemas/FileCell'
          description: "The value of the cell as a file resource. This can represent various file types\nsuch as images, documents, audio, or other binary data."
        documentValue:
          allOf:
            - $ref: '#/components/schemas/DocumentCell'
          description: "The value of the cell as a document resource. The document resource is a\nfile resource that is specifically designed for document types, such as\nTXT, Markdown, PDF, DOC, and PPT."
        metadata:
          type: object
          description: Additional metadata for the cell.
        status:
          allOf:
            - $ref: '#/components/schemas/CellStatus'
          description: The status of the cell.
          readOnly: true
        citations:
          type: array
          items:
            $ref: '#/components/schemas/Citation'
          description: The citations for the cell.
          readOnly: true
        transparency:
          allOf:
            - $ref: '#/components/schemas/Transparency'
          description: The transparency of the cell.
          readOnly: true
        lockState:
          allOf:
            - $ref: '#/components/schemas/LockState'
          description: The lock state of the cell.
          readOnly: true
      description: Cell represents a cell in a table.
    CellStatus:
      enum:
        - CELL_STATUS_IDLE
        - CELL_STATUS_DATA_UPLOADING
        - CELL_STATUS_DATA_PENDING
        - CELL_STATUS_DATA_PROCESSING
        - CELL_STATUS_DATA_FAILED
        - CELL_STATUS_TRANSPARENCY_PENDING
        - CELL_STATUS_TRANSPARENCY_PROCESSING
        - CELL_STATUS_TRANSPARENCY_FAILED
      type: string
      description: "CellStatus represents the processing state of a cell.\n\n - CELL_STATUS_IDLE: The cell is in a stable, ready state with no active processing.\n - CELL_STATUS_DATA_UPLOADING: The cell's file data is currently being uploaded to the server.\nThis status only applies to cells with file type values.\n - CELL_STATUS_DATA_PENDING: The cell's data is queued for processing but has not started yet.\n - CELL_STATUS_DATA_PROCESSING: The cell's data is actively being processed.\n - CELL_STATUS_DATA_FAILED: The cell's data processing encountered an error and failed to complete.\n - CELL_STATUS_TRANSPARENCY_PENDING: The cell's transparency information is queued for generation but has not started yet.\n - CELL_STATUS_TRANSPARENCY_PROCESSING: The cell's transparency information is actively being generated.\n - CELL_STATUS_TRANSPARENCY_FAILED: The cell's transparency generation encountered an error and failed to complete."
    CellUpdatedEvent:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The cell that was updated.
          readOnly: true
        deltaMode:
          type: boolean
          description: "Whether the event is a delta update.\nOnly cells with string type can be returned in delta mode. Delta mode returns\nonly the changes made to the cell value rather than the full value."
          readOnly: true
      description: CellUpdatedEvent represents an event for a cell being updated.
    Chat:
      title: Chat represents a chat
      required:
        - namespaceId
      type: object
      properties:
        uid:
          type: string
          description: unique identifier of the conversation created by the system.
          readOnly: true
        namespaceId:
          type: string
          description: namespace id.
        chatDisplayName:
          type: string
          description: conversation display name.
        agentConfig:
          allOf:
            - $ref: '#/components/schemas/.AgentConfig'
          description: agent config.
          readOnly: true
        createTime:
          type: string
          description: chat create time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: chat update time.
          format: date-time
          readOnly: true
        deleteTime:
          type: string
          description: chat delete time.
          format: date-time
          readOnly: true
        catalogId:
          title: catalog id
          type: string
          readOnly: true
    ChatAttachments:
      title: ChatAttachments represents the attachment for the message
      type: object
      properties:
        fileUrls:
          title: file urls (only for user messages)
          type: array
          items:
            type: string
          readOnly: true
    ChatAttachmentsUpdatedEvent:
      title: ChatAttachmentsUpdatedEvent represents an event for a attachment list output
      type: object
      properties:
        createTime:
          title: The time when attachment list updated
          type: string
          format: date-time
          readOnly: true
        attachments:
          title: The attachments
          allOf:
            - $ref: '#/components/schemas/ChatAttachments'
          readOnly: true
    ChatCitationListUpdatedEvent:
      title: ChatCitationListUpdatedEvent represents an event for a citation list output
      required:
        - citations
      type: object
      properties:
        createTime:
          title: The time when citation list output
          type: string
          format: date-time
          readOnly: true
        citations:
          title: The citation list
          type: array
          items:
            $ref: '#/components/schemas/Citation'
          readOnly: true
    ChatContext:
      type: object
      properties:
        tableUids:
          type: array
          items:
            type: string
          description: The table uids to include in the context.
      description: The context for the message.
    ChatContextUpdatedEvent:
      title: ChatContextUpdatedEvent represents an event for a context updated
      type: object
      properties:
        createTime:
          title: The time when context updated
          type: string
          format: date-time
          readOnly: true
        context:
          title: The context
          allOf:
            - $ref: '#/components/schemas/ChatContext'
          readOnly: true
    ChatDebugOutputUpdatedEvent:
      title: ChatDebugOutputUpdatedEvent represents an event for debug log
      type: object
      properties:
        createTime:
          title: The time when debug log output
          type: string
          format: date-time
          readOnly: true
        debugOutput:
          title: The debug output
          type: string
          readOnly: true
    ChatEndedEvent:
      title: ChatEndedEvent represents an event when chat ends
      type: object
      properties:
        createTime:
          title: The time when chat ends
          type: string
          format: date-time
          readOnly: true
    ChatErrorUpdatedEvent:
      title: ChatErrorUpdatedEvent represents an event for an error
      type: object
      properties:
        createTime:
          title: The time when error triggered
          type: string
          format: date-time
          readOnly: true
        errorType:
          title: The error type
          type: string
          readOnly: true
        error:
          title: The error message
          type: string
          readOnly: true
    ChatEvent:
      type: object
      properties:
        event:
          type: string
          description: "The event type.\nIn text/event-stream format, this maps to the `event` field."
          readOnly: true
        id:
          type: string
          description: "The ID of the event.\nIn text/event-stream format, this maps to the `id` field."
          readOnly: true
        chatStartedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatStartedEvent'
          description: The chat was started.
        chatStatusUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatStatusUpdatedEvent'
          description: The chat status was updated.
        chatOutputUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatOutputUpdatedEvent'
          description: The chat output was updated.
        chatNameUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatNameUpdatedEvent'
          description: The chat name was updated.
        chatReplanTriggeredEvent:
          allOf:
            - $ref: '#/components/schemas/ChatReplanTriggeredEvent'
          description: The chat replan was triggered.
        chatCitationListUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatCitationListUpdatedEvent'
          description: The chat citation list was updated.
        chatTableCreatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatTableCreatedEvent'
          description: The table was created.
        chatErrorUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatErrorUpdatedEvent'
          description: The error was updated.
        chatDebugOutputUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatDebugOutputUpdatedEvent'
          description: The debug output was updated.
        chatEndedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatEndedEvent'
          description: The chat ended.
        chatAttachmentsUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatAttachmentsUpdatedEvent'
          description: The chat attachments were updated.
        chatContextUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatContextUpdatedEvent'
          description: The chat context was updated.
        chatTableUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ChatTableUpdatedEvent'
          description: The table was updated.
      description: ChatEvent represents an event for a chat.
    ChatNameUpdatedEvent:
      title: ChatNameUpdatedEvent represents an event for chat name change
      type: object
      properties:
        createTime:
          title: The time when chat name change
          type: string
          format: date-time
          readOnly: true
        name:
          title: The updated chat name
          type: string
          readOnly: true
    ChatOutputUpdatedEvent:
      title: ChatOutputUpdatedEvent represents an event for chat has new output
      required:
        - outputChunkDelta
      type: object
      properties:
        createTime:
          title: The time when chat has new output
          type: string
          format: date-time
          readOnly: true
        outputChunkDelta:
          title: The output chunk delta
          type: string
          readOnly: true
    ChatReplanTriggeredEvent:
      title: ChatReplanTriggeredEvent represents an event for a triggered replan
      type: object
      properties:
        createTime:
          title: The time when replan trigger
          type: string
          format: date-time
          readOnly: true
        numberOfReplan:
          title: The current number of replan
          type: integer
          format: int64
          readOnly: true
    ChatStartedEvent:
      title: ChatStartedEvent represents an event for a chat started
      type: object
      properties:
        createTime:
          title: The time when chat start
          type: string
          format: date-time
          readOnly: true
    ChatStatusUpdatedEvent:
      title: ChatStatusUpdatedEvent represents an event for a chat status change
      type: object
      properties:
        createTime:
          title: The time when chat status change
          type: string
          format: date-time
          readOnly: true
        chatStatus:
          title: The updated chat status
          type: string
          readOnly: true
    ChatTableCreatedEvent:
      title: ChatTableCreatedEvent represents an event for a table creation
      type: object
      properties:
        createTime:
          title: The time when table is created
          type: string
          format: date-time
          readOnly: true
        tableUid:
          title: The created table uid
          type: string
          readOnly: true
        table:
          title: The created table
          allOf:
            - $ref: '#/components/schemas/Table'
          readOnly: true
        columnDefinitions:
          title: The created column definitions
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColumnDefinition'
          readOnly: true
    ChatTableUpdatedEvent:
      title: ChatTableUpdatedEvent represents an event for a table update
      type: object
      properties:
        createTime:
          title: The time when table updated
          type: string
          format: date-time
          readOnly: true
        tableUid:
          title: The updated table uid
          type: string
          readOnly: true
        table:
          title: The updated table
          allOf:
            - $ref: '#/components/schemas/Table'
          readOnly: true
        columnDefinitions:
          title: The updated column definitions
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColumnDefinition'
          readOnly: true
    ChatWithAgentBody:
      required:
        - message
      type: object
      properties:
        message:
          title: User message
          type: string
        fileUids:
          title: file UIDs
          type: array
          items:
            type: string
        enableWebSearch:
          type: boolean
          description: Whether to enable web search for the chat.
        objectUids:
          title: object UIDs
          type: array
          items:
            type: string
        context:
          allOf:
            - $ref: '#/components/schemas/ChatContext'
          description: The context for the chat.
      description: "ChatWithAgentRequest represents a request to send a message\nto a chatbot synchronously and streams back the results."
    ChatWithAgentResponse:
      type: object
      properties:
        outputs:
          type: array
          items:
            type: object
          description: Conversation responses.
          readOnly: true
      description: ChatWithAgentResponse contains the chatbot response.
    ChatWithTableBuilderAgentBody:
      required:
        - message
      type: object
      properties:
        message:
          title: User message
          type: string
      description: ChatWithTableBuilderAgentRequest represents a request to chat with the table builder agent.
    ChatWithTableBuilderAgentResponse:
      type: object
      properties:
        event:
          allOf:
            - $ref: '#/components/schemas/ChatEvent'
          description: The response from the table builder agent.
          readOnly: true
      description: ChatWithTableBuilderAgentResponse contains the response from the table builder agent.
    CheckNamespaceAdminResponse:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/CheckNamespaceAdminResponse.Namespace'
          description: Namespace type.
        uid:
          type: string
          description: Namespace UID.
        user:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: User.
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: Organization.
      description: "CheckNamespaceAdminResponse contains the availability of a namespace or the type\nof resource that's using it."
    CheckNamespaceAdminResponse.Namespace:
      enum:
        - NAMESPACE_AVAILABLE
        - NAMESPACE_USER
        - NAMESPACE_ORGANIZATION
        - NAMESPACE_RESERVED
      type: string
      description: "Namespace contains information about the availability of a namespace.\n\n - NAMESPACE_AVAILABLE: Available.\n - NAMESPACE_USER: Namespace belongs to a user.\n - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.\n - NAMESPACE_RESERVED: Reserved."
    CheckNamespaceByUIDAdminResponse:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/CheckNamespaceByUIDAdminResponse.Namespace'
          description: Namespace type.
        id:
          type: string
          description: Namespace ID.
        user:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: User.
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: Organization.
      description: "CheckNamespaceByUIDAdminResponse contains the availability of a namespace or the type\nof resource that's using it."
    CheckNamespaceByUIDAdminResponse.Namespace:
      enum:
        - NAMESPACE_AVAILABLE
        - NAMESPACE_USER
        - NAMESPACE_ORGANIZATION
        - NAMESPACE_RESERVED
      type: string
      description: "Namespace contains information about the availability of a namespace.\n\n - NAMESPACE_AVAILABLE: Available.\n - NAMESPACE_USER: Namespace belongs to a user.\n - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.\n - NAMESPACE_RESERVED: Reserved."
    CheckNamespaceRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The namespace ID to be checked.
      description: "CheckNamespaceRequest represents a request to verify if a namespace is\navailable."
    CheckNamespaceResponse:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/CheckNamespaceResponse.Namespace'
          description: Namespace type.
      description: "CheckNamespaceResponse contains the availability of a namespace or the type\nof resource that's using it."
    CheckNamespaceResponse.Namespace:
      enum:
        - NAMESPACE_AVAILABLE
        - NAMESPACE_USER
        - NAMESPACE_ORGANIZATION
        - NAMESPACE_RESERVED
      type: string
      description: "Namespace contains information about the availability of a namespace.\n\n - NAMESPACE_AVAILABLE: Available.\n - NAMESPACE_USER: Namespace belongs to a user.\n - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.\n - NAMESPACE_RESERVED: Reserved."
    ChunkType:
      title: chunk type
      enum:
        - CHUNK_TYPE_TEXT
        - CHUNK_TYPE_IMAGE
        - CHUNK_TYPE_AUDIO
        - CHUNK_TYPE_VIDEO
      type: string
      description: "- CHUNK_TYPE_TEXT: text\n - CHUNK_TYPE_IMAGE: image\n - CHUNK_TYPE_AUDIO: audio\n - CHUNK_TYPE_VIDEO: video"
    Citation:
      title: Citation message
      type: object
      properties:
        type:
          title: Type of citation
          allOf:
            - $ref: '#/components/schemas/CitationType'
        name:
          title: Name of the citation
          type: string
          readOnly: true
        url:
          title: 'URL of the citation, can be web url, cell url or object-uid'
          type: string
          readOnly: true
        number:
          title: Citation number
          type: integer
          format: int64
          readOnly: true
        summary:
          title: File summary (only applicable for file type citations)
          type: string
          readOnly: true
        extractMethod:
          title: Citation extract method type
          allOf:
            - $ref: '#/components/schemas/CitationExtractMethodType'
          readOnly: true
    CitationExtractMethodType:
      title: type of the citations message extract method
      enum:
        - CITATION_EXTRACT_METHOD_TYPE_SELF
        - CITATION_EXTRACT_METHOD_TYPE_WEB
        - CITATION_EXTRACT_METHOD_TYPE_RAG
        - CITATION_EXTRACT_METHOD_TYPE_DEEP_ANALYSIS
      type: string
      description: "- CITATION_EXTRACT_METHOD_TYPE_SELF: self generated\n - CITATION_EXTRACT_METHOD_TYPE_WEB: extract from web search tool\n - CITATION_EXTRACT_METHOD_TYPE_RAG: extract from RAG tool\n - CITATION_EXTRACT_METHOD_TYPE_DEEP_ANALYSIS: extract from deep analysis tool"
    CitationType:
      title: type of the citations message
      enum:
        - CITATION_TYPE_FILE
        - CITATION_TYPE_WEB
        - CITATION_TYPE_TABLE
      type: string
      description: "- CITATION_TYPE_FILE: file-based citation\n - CITATION_TYPE_WEB: web-based citation\n - CITATION_TYPE_TABLE: table-based citation"
    CloneNamespacePipelineBody:
      required:
        - targetNamespaceId
        - targetPipelineId
      type: object
      properties:
        description:
          type: string
          description: Pipeline description.
        sharing:
          allOf:
            - $ref: '#/components/schemas/Sharing'
          description: Pipeline sharing information.
        targetNamespaceId:
          type: string
          description: Target Namespace ID.
        targetPipelineId:
          type: string
          description: Target Pipeline ID.
      description: "CloneNamespacePipelineRequest represents a request to clone a pipeline owned by a\nuser."
    CloneNamespacePipelineReleaseBody:
      required:
        - targetNamespaceId
        - targetPipelineId
      type: object
      properties:
        description:
          type: string
          description: Pipeline description.
        sharing:
          allOf:
            - $ref: '#/components/schemas/Sharing'
          description: Pipeline sharing information.
        targetNamespaceId:
          type: string
          description: Target Namespace ID.
        targetPipelineId:
          type: string
          description: Target Pipeline ID.
      description: "CloneNamespacePipelineReleaseRequest represents a request to clone a pipeline\nrelease owned by a user."
    CloneNamespacePipelineReleaseResponse:
      type: object
      description: CloneNamespacePipelineReleaseResponse contains a cloned pipeline.
    CloneNamespacePipelineResponse:
      type: object
      description: CloneNamespacePipelineResponse contains a cloned pipeline.
    ColumnDefinition:
      required:
        - type
        - order
      type: object
      properties:
        columnUid:
          type: string
          description: The unique identifier of the column.
          readOnly: true
        name:
          type: string
          description: "The name of the column.\nThe name of the column. If this differs from the key in the ColumnDefinitions map,\nthe key will be updated to match this value."
        type:
          allOf:
            - $ref: '#/components/schemas/.Type'
          description: The type of the column.
        order:
          type: integer
          description: "The order of the column in the table, starting at 1. This determines the column's position\nwhen displaying or processing table data."
          format: int32
        agentConfig:
          allOf:
            - $ref: '#/components/schemas/ColumnDefinition.AgentConfig'
          description: The configuration for the agent.
        sort:
          allOf:
            - $ref: '#/components/schemas/Sort'
          description: The sort of the column.
        description:
          type: string
          description: The description for the column.
        numberFormat:
          allOf:
            - $ref: '#/components/schemas/NumberFormat'
          description: Format for number type columns.
        selection:
          allOf:
            - $ref: '#/components/schemas/Selection'
          description: The selection settings of the column.
        metadata:
          type: object
          description: The metadata of the column.
      description: ColumnDefinition represents a column definition in a table.
    ColumnDefinition.AgentConfig:
      required:
        - instructions
        - enableWebSearch
      type: object
      properties:
        instructions:
          type: string
          description: The instructions for the agent.
        enableWebSearch:
          type: boolean
          description: Whether to enable web search for the column.
        enableAutomaticComputation:
          type: boolean
          description: Whether to enable automatic computation for the column.
        context:
          allOf:
            - $ref: '#/components/schemas/Context'
          description: The context for the agent. This setting is only used if enable_automatic_computation is true.
      description: The configuration for the agent.
    ColumnDefinitionsUpdatedEvent:
      type: object
      properties:
        columnDefinitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColumnDefinition'
          description: The column definitions that were updated.
          readOnly: true
      description: ColumnDefinitionsUpdatedEvent represents an event for column definitions being updated.
    ComponentDefinition:
      type: object
      properties:
        name:
          title: "The name of the component definition, defined by its ID.\n- Format: `component-definitions/{id}`"
          type: string
          readOnly: true
        uid:
          type: string
          description: Component definition UUID.
          readOnly: true
        id:
          type: string
          description: "Component definition resource ID (used in `name` as the last segment). This\nconforms to RFC-1034, which restricts to letters, numbers, and hyphen,\nwith the first character a letter, the last a letter or a number, and a 63\ncharacter maximum."
        title:
          type: string
          description: Component definition title.
          readOnly: true
        documentationUrl:
          type: string
          description: Component definition documentation URL.
          readOnly: true
        icon:
          type: string
          description: "Component definition icon. This is a path that's relative to the root of\nthe component implementation (see `source_url`) and that allows\nfrontend applications to pull and locate the icons."
          readOnly: true
        spec:
          allOf:
            - $ref: '#/components/schemas/Spec'
          description: Component definition specification.
          readOnly: true
        type:
          allOf:
            - $ref: '#/components/schemas/ComponentType'
          description: Component definition type.
          readOnly: true
        tombstone:
          type: boolean
          description: "Component definition tombstone. If true, this configuration is permanently\noff. Otherwise, the configuration is active."
          readOnly: true
        public:
          type: boolean
          description: "The public flag determines whether this connector definition is available\nto all workspaces."
          readOnly: true
        custom:
          type: boolean
          description: "Component definition custom flag, i.e., whether this is a custom\ncomponent definition."
          readOnly: true
        vendor:
          type: string
          description: Component definition vendor name.
          readOnly: true
        vendorAttributes:
          type: object
          description: Vendor-specific attributes.
          readOnly: true
        sourceUrl:
          type: string
          description: "Source code URL. This points to the source code where the component is\nimplemented."
          readOnly: true
        version:
          type: string
          description: "Component definition version. This is a string that fulfills the SemVer\nspecification (e.g. `1.0.0-beta`)."
          readOnly: true
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTask'
          description: List of tasks that can be executed by the component.
          readOnly: true
        description:
          type: string
          description: Short description of the component.
          readOnly: true
        releaseStage:
          allOf:
            - $ref: '#/components/schemas/ComponentDefinition.ReleaseStage'
          description: Release stage.
          readOnly: true
        events:
          type: array
          items:
            $ref: '#/components/schemas/ComponentEvent'
          description: List of events that can be produced by the component.
          readOnly: true
      description: ComponentDefinition describes a certain type of Component.
    ComponentDefinition.ReleaseStage:
      title: "ReleaseStage defines the release stage of a component. This is used to\ngroup components with the same pre-relase groups (e.g. `0.1.0-beta`,\n`0.1.0-beta.1` -> `RELEASE_STAGE_BETA`) and to include other \"in progress\"\n(i.e. coming soon, open for contributions) stages that may not be relevant\nwithin semantic versioning.\nSee the documentation of each value for potential constraints between\n`version` and `release_stage` fields.`"
      enum:
        - RELEASE_STAGE_OPEN_FOR_CONTRIBUTION
        - RELEASE_STAGE_COMING_SOON
        - RELEASE_STAGE_ALPHA
        - RELEASE_STAGE_BETA
        - RELEASE_STAGE_GA
      type: string
      description: "- RELEASE_STAGE_OPEN_FOR_CONTRIBUTION: This component is unimplemented and community contributions are welcome\nfor this component.\n\nIt is recommended that the major and minor versions for definitions at\nthis release stage is kept at 0, e.g., `0.0.1`, `0.0.4`, etc.\n - RELEASE_STAGE_COMING_SOON: The implementation of this component is planned and will be tackled by\nthe Instill AI team.\n\nIt is recommended that the major and minor versions for definitions at\nthis release stage is kept at 0, e.g., `0.0.1`, `0.0.4`, etc.\n - RELEASE_STAGE_ALPHA: Initial implementation intended to gather feedback and issues from early\nadopters. Alpha releases are discouraged for production use cases.\n\nThe `version` field in the definition must have `alpha` as its first\npre-release identifier, e.g., `0.1.0-alpha`, `0.1.3-alpha.1`.\n - RELEASE_STAGE_BETA: The component has reached stability and no backwards incompatible\nchanges are expected. Before reaching general availability, it should be\nvalidated by a broader group of users. Some fixes might be added during\nthis process.\n\nThe `version` field in the definition must have `beta` as its first\npre-release identifier, e.g., `0.1.0-beta`, `0.1.3-beta.1`.\n - RELEASE_STAGE_GA: Generally available - ready for use in production and fully supported by\nInstill AI."
    ComponentDefinition.View:
      enum:
        - VIEW_BASIC
        - VIEW_FULL
      type: string
      description: "View defines how a component definition is presented.\n\n - VIEW_BASIC: Default view, only includes basic information (removes the `spec`\nfield).\n - VIEW_FULL: Full representation."
    ComponentEvent:
      type: object
      properties:
        name:
          type: string
          description: 'The event name, e.g. `EVENT_NEW`.'
          readOnly: true
        title:
          type: string
          description: Title is the event name in a human-friendly format.
          readOnly: true
        description:
          type: string
          description: Description contains information about the event.
          readOnly: true
      description: "ComponentEvent contains information about an event that a component can\nproduce."
    ComponentRun:
      type: object
      properties:
        pipelineRunUid:
          type: string
          description: Links to the parent PipelineRun.
          readOnly: true
        componentId:
          type: string
          description: Unique identifier for each pipeline component.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
          description: Completion status of the component.
          readOnly: true
        totalDuration:
          type: integer
          description: Time taken to execute the component in milliseconds.
          format: int32
          readOnly: true
        startTime:
          type: string
          description: Time when the component started execution.
          format: date-time
          readOnly: true
        completeTime:
          type: string
          description: Time when the component finished execution.
          format: date-time
          readOnly: true
        error:
          type: string
          description: Error message if the component failed.
          readOnly: true
        inputsReference:
          type: array
          items:
            $ref: '#/components/schemas/FileReference'
          description: Input files for the run.
          readOnly: true
        inputs:
          type: array
          items:
            type: object
          description: Component input parameters.
          readOnly: true
        outputsReference:
          type: array
          items:
            $ref: '#/components/schemas/FileReference'
          description: Output files from the run.
          readOnly: true
        outputs:
          type: array
          items:
            type: object
          description: Component inference outputs.
          readOnly: true
        creditAmount:
          type: number
          description: Credits used of internal accounting metric.
          format: float
          readOnly: true
        blobDataExpirationTime:
          type: string
          description: "Expiration time for the blob data associated with the component run (e.g.\ninput / output data). When the run is accessed after the expiration, that\ninformation will be empty, but this field will allow the user identify\nthat the data isn't there because it has expired."
          format: date-time
          readOnly: true
      description: ComponentRun represents the execution details of a single component within a pipeline run.
    ComponentTask:
      type: object
      properties:
        name:
          type: string
          description: 'The task name, e.g. `TASK_TEXT_GENERATION`.'
          readOnly: true
        title:
          type: string
          description: Title is the task name in a human-friendly format.
          readOnly: true
        description:
          type: string
          description: Description contains information about the task.
          readOnly: true
      description: "ComponentTask contains information about a task that a component can\nperform."
    ComponentType:
      enum:
        - COMPONENT_TYPE_AI
        - COMPONENT_TYPE_DATA
        - COMPONENT_TYPE_OPERATOR
        - COMPONENT_TYPE_APPLICATION
        - COMPONENT_TYPE_GENERIC
      type: string
      description: "ComponentType defines the component type based on its task features.\n\n - COMPONENT_TYPE_AI: Connect with an AI model.\n - COMPONENT_TYPE_DATA: Connect with a remote data source.\n - COMPONENT_TYPE_OPERATOR: Manipulate data.\n - COMPONENT_TYPE_APPLICATION: Connect with an external application.\n - COMPONENT_TYPE_GENERIC: Generic."
    Connection:
      required:
        - id
        - integrationId
        - method
        - setup
      type: object
      properties:
        uid:
          type: string
          description: UUID-formatted unique identifier.
          readOnly: true
        id:
          type: string
          description: ID.
        namespaceId:
          type: string
          description: ID of the namespace owning the connection.
          readOnly: true
        integrationId:
          type: string
          description: "Integration ID. It determines for which type of components can reference\nthis connection."
        integrationTitle:
          type: string
          description: "Integration title. This helps the console display the results grouped by\nintegration ID without needing an extra call to fetch title by integration\nID."
          readOnly: true
        method:
          allOf:
            - $ref: '#/components/schemas/Method'
          description: "Connection method. It references the setup schema provided by the\nintegration."
        setup:
          type: object
          description: "Connection details. This field is required on creation, optional on view.\nWhen viewing the connection details, the setup values will be redacted."
        scopes:
          type: array
          items:
            type: string
          description: "A list of scopes that identify the resources that the connection will be\nable to access on the user's behalf. This is typically passed on creation\nwhen the setup has been generated through an OAuth flow with a limited set\nof scopes."
        identity:
          type: string
          description: "When the connection method is METHOD_OAUTH, this field will hold the\nidentity (e.g., email, username) with which the access token has been\ngenerated."
        oAuthAccessDetails:
          type: object
          description: "When the connection method is METHOD_OAUTH, the access token might come\nwith some extra information that might vary across vendors. This\ninformation is passed as connection metadata."
        view:
          title: "View defines how the connection is presented. The following fields are\nonly shown in the FULL view:\n- setup\n- scopes\n- oAuthAccessDetails"
          allOf:
            - $ref: '#/components/schemas/pipeline.v1beta.View'
          readOnly: true
        createTime:
          type: string
          description: Creation timestamp.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Last update timestamp.
          format: date-time
          readOnly: true
      description: "Connection contains the parameters to communicate with a 3rd party app. A\ncomponent may reference a connection in their setup. One connection may be\nused by several components and pipelines."
    ContentType:
      enum:
        - CONTENT_TYPE_CHUNK
        - CONTENT_TYPE_SUMMARY
        - CONTENT_TYPE_AUGMENTED
      type: string
      description: "ContentType describes the type of a chunk content.\n\n - CONTENT_TYPE_CHUNK: Chunk.\n - CONTENT_TYPE_SUMMARY: Summary.\n - CONTENT_TYPE_AUGMENTED: Augmented."
    Context:
      type: object
      properties:
        columnUids:
          type: array
          items:
            type: string
          description: The column uids to include in the context.
      description: The context for the agent.
    CreateCatalogBody:
      type: object
      properties:
        name:
          type: string
          description: The catalog name.
        description:
          type: string
          description: The catalog description.
        tags:
          type: array
          items:
            type: string
          description: The catalog tags.
        type:
          title: The catalog type. default is PERSISTENT
          allOf:
            - $ref: '#/components/schemas/CatalogType'
      description: CreateCatalogRequest represents a request to create a catalog.
    CreateCatalogResponse:
      required:
        - catalog
      type: object
      properties:
        catalog:
          allOf:
            - $ref: '#/components/schemas/Catalog'
          description: The created catalog.
      description: CreateCatalogResponse represents a response for creating a catalog.
    CreateChatBody:
      title: CreateChatRequest is used to create a new chat
      type: object
      properties:
        chatDisplayName:
          title: chat display name
          type: string
        agentConfig:
          title: agent config
          allOf:
            - $ref: '#/components/schemas/.AgentConfig'
        catalogId:
          title: catalog id
          type: string
    CreateChatResponse:
      title: CreateChatResponse returns the created chat
      type: object
      properties:
        chat:
          title: chat
          allOf:
            - $ref: '#/components/schemas/Chat'
          readOnly: true
    CreateFolderBody:
      required:
        - folder
      type: object
      properties:
        folder:
          allOf:
            - $ref: '#/components/schemas/Folder'
          description: The folder resource to create.
      description: CreateFolderRequest represents a request to create a folder.
    CreateFolderResponse:
      type: object
      properties:
        folder:
          allOf:
            - $ref: '#/components/schemas/Folder'
          description: The created folder resource.
          readOnly: true
      description: CreateFolderResponse contains the created folder.
    CreateNamespaceConnectionResponse:
      type: object
      properties:
        connection:
          allOf:
            - $ref: '#/components/schemas/Connection'
          description: The created connection.
          readOnly: true
      description: CreateNamespaceConnectionResponse contains the created connection.
    CreateNamespaceModelResponse:
      type: object
      properties:
        model:
          allOf:
            - $ref: '#/components/schemas/Model'
          description: The created model resource.
          readOnly: true
      description: CreateNamespaceModelResponse contains the created model.
    CreateNamespacePipelineReleaseResponse:
      type: object
      properties:
        release:
          allOf:
            - $ref: '#/components/schemas/PipelineRelease'
          description: The created pipeline release object.
          readOnly: true
      description: CreateNamespacePipelineReleaseResponse contains the created release.
    CreateNamespacePipelineResponse:
      type: object
      properties:
        pipeline:
          allOf:
            - $ref: '#/components/schemas/Pipeline'
          description: The created pipeline resource.
          readOnly: true
      description: CreateNamespacePipelineResponse contains the created pipeline.
    CreateNamespaceSecretResponse:
      type: object
      properties:
        secret:
          allOf:
            - $ref: '#/components/schemas/Secret'
          description: The created secret resource.
          readOnly: true
      description: CreateNamespaceSecretResponse contains the created secret.
    CreateOrganizationResponse:
      type: object
      properties:
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: The organization resource.
          readOnly: true
      description: CreateOrganizationResponse contains the created organization.
    CreateRepositoryTagResponse:
      type: object
      properties:
        tag:
          allOf:
            - $ref: '#/components/schemas/RepositoryTag'
          description: The created tag.
      description: CreateRepositoryTagResponse contains the created tag.
    CreateTableFromTemplateBody:
      required:
        - table
        - templateNamespaceId
        - templateTableUid
      type: object
      properties:
        table:
          allOf:
            - $ref: '#/components/schemas/Table'
          description: The table resource to create.
        templateNamespaceId:
          type: string
          description: The ID of the table namespace to create the table from.
        templateTableUid:
          type: string
          description: The ID of the table to create the table from.
      description: CreateTableFromTemplateRequest represents a request to create a table from a table template.
    CreateTableFromTemplateResponse:
      type: object
      properties:
        table:
          allOf:
            - $ref: '#/components/schemas/Table'
          description: The created table.
          readOnly: true
      description: CreateTableFromTemplateResponse contains the created table.
    CreateTableResponse:
      type: object
      properties:
        table:
          allOf:
            - $ref: '#/components/schemas/Table'
          description: The created table resource.
          readOnly: true
      description: CreateTableResponse contains the created table.
    CreateTokenResponse:
      type: object
      properties:
        token:
          allOf:
            - $ref: '#/components/schemas/ApiToken'
          description: The created API token resource.
          readOnly: true
      description: CreateTokenResponse contains the created token.
    CreditConsumptionChartRecord:
      required:
        - namespaceId
      type: object
      properties:
        namespaceId:
          type: string
          description: The ID of the namespace that owns the credit.
        timeBuckets:
          type: array
          items:
            type: string
            format: date-time
          description: Time buckets.
          readOnly: true
        amount:
          type: array
          items:
            type: number
            format: float
          description: Total credit consumed in each time bucket.
          readOnly: true
        source:
          type: string
          description: 'Credit consumption source (e.g. "pipeline", "model").'
          readOnly: true
      description: "CreditConsumptionChartRecord represents a timeline of Instill Credit\nconsumption. It contains a collection of (timestamp, amount) pairs that\nrepresent the total credit consumption in a given time bucket."
    DataSpecification:
      type: object
      properties:
        input:
          type: object
          description: JSON schema describing the component input data.
          readOnly: true
        output:
          type: object
          description: JSON schema describing the component output data.
          readOnly: true
      description: "DataSpecification describes the JSON schema of component input and output.\nNote: This message will be renamed to TaskSpecifications in the future."
    DeleteCatalogFileResponse:
      title: delete file response
      type: object
      properties:
        fileUid:
          type: string
          description: The file uid.
    DeleteCatalogResponse:
      type: object
      properties:
        catalog:
          allOf:
            - $ref: '#/components/schemas/Catalog'
          description: The catalog identifier.
      description: DeleteCatalogResponse represents a response for deleting a catalog.
    DeleteChatResponse:
      title: DeleteChatResponse is empty as no content needs to be returned
      type: object
    DeleteFolderResponse:
      type: object
      description: DeleteFolderResponse is an empty response for deleting a folder.
    DeleteNamespaceConnectionResponse:
      type: object
      description: DeleteNamespaceConnectionResponse is an empty response.
    DeleteNamespaceModelResponse:
      type: object
      description: DeleteNamespaceModelResponse is an empty response.
    DeleteNamespaceModelVersionResponse:
      type: object
      description: DeleteNamespaceModelVersionResponse is an empty response.
    DeleteNamespacePipelineReleaseResponse:
      type: object
      description: DeleteNamespacePipelineReleaseResponse is an empty response.
    DeleteNamespacePipelineResponse:
      type: object
      description: DeleteNamespacePipelineResponse is an empty response.
    DeleteNamespaceSecretResponse:
      type: object
      description: DeleteNamespaceSecretResponse is an empty response.
    DeleteOrganizationMembershipResponse:
      type: object
      description: DeleteOrganizationMembershipResponse is an empty response.
    DeleteOrganizationResponse:
      type: object
      description: DeleteOrganizationResponse is an empty response.
    DeleteRepositoryTagResponse:
      type: object
      description: DeleteRepositoryTagResponse represent an empty response.
    DeleteRowResponse:
      type: object
      description: DeleteRowResponse is an empty response for deleting a row.
    DeleteRowsResponse:
      type: object
      description: DeleteRowsResponse is an empty response for deleting multiple rows.
    DeleteTableResponse:
      type: object
      description: DeleteTableResponse is an empty response for deleting a table.
    DeleteTokenResponse:
      type: object
      description: DeleteTokenResponse is an empty response.
    DeleteUserMembershipResponse:
      type: object
      description: DeleteUserMembershipResponse is an empty response.
    DeployNamespaceModelAdminResponse:
      title: DeployNamespaceModelAdminResponse represents a response for a deployed model
      type: object
    DeployOrganizationModelAdminResponse:
      title: "DeployOrganizationModelAdminResponse represents a response for a deployed\nmodel"
      type: object
    DeployUserModelAdminResponse:
      title: DeployUserModelAdminResponse represents a response for a deployed model
      type: object
    DocumentCell:
      required:
        - namespace
        - fileUid
        - objectUid
        - name
        - mimeType
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of the document resource.
        fileUid:
          type: string
          description: The File UID of the document resource.
        objectUid:
          type: string
          description: The UID of the raw object that the document resource belongs to.
        name:
          title: File name
          type: string
        mimeType:
          type: string
          description: MIME type of the document.
      description: DocumentCell represents a cell with a document resource.
    Endpoints:
      type: object
      properties:
        webhooks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WebhookEndpoint'
          description: Webhook endpoints.
          readOnly: true
      description: Endpoints describe the endpoints of a pipeline.
    ErrPipelineValidation:
      type: object
      properties:
        location:
          title: Location
          type: string
        error:
          title: error
          type: string
      description: "ErrPipelineValidation contains information about a failed pipeline\nvalidation."
    EventSpecification:
      type: object
      properties:
        title:
          type: string
          description: Event title.
          readOnly: true
        description:
          type: string
          description: Event description.
          readOnly: true
        configSchema:
          type: object
          description: JSON schema describing the component event config data.
          readOnly: true
        messageSchema:
          type: object
          description: JSON schema describing the component event message data.
          readOnly: true
        messageExamples:
          type: array
          items:
            type: object
          description: JSON schema describing the component event examples.
          readOnly: true
      description: EventSpecification describes the JSON schema of component event setup and examples.
    ExportFormat:
      enum:
        - EXPORT_FORMAT_CSV
        - EXPORT_FORMAT_PARQUET
      type: string
      description: "ExportFormat represents the format to export the data in.\n\n - EXPORT_FORMAT_CSV: The format is CSV.\n - EXPORT_FORMAT_PARQUET: The format is Parquet."
    ExportTableBody:
      required:
        - format
      type: object
      properties:
        format:
          allOf:
            - $ref: '#/components/schemas/ExportFormat'
          description: The format to export the data in.
      description: ExportTableRequest represents a request to export table data.
    ExportTableResponse:
      type: object
      properties:
        data:
          type: string
          description: The exported data.
          format: byte
          readOnly: true
      description: ExportTableResponse is an empty response for exporting table data.
    File:
      title: file
      required:
        - fileUid
      type: object
      properties:
        fileUid:
          title: file uid
          type: string
          readOnly: true
        name:
          title: file name
          type: string
        type:
          title: file type
          allOf:
            - $ref: '#/components/schemas/FileType'
        processStatus:
          title: file process status
          allOf:
            - $ref: '#/components/schemas/FileProcessStatus'
          readOnly: true
        processOutcome:
          title: file process message
          type: string
          readOnly: true
        retrievable:
          title: retrievable(this is reserved for future use)
          type: boolean
          readOnly: true
        content:
          title: content(this is reserved for future use)
          type: string
        ownerUid:
          title: owner/namespace uid
          type: string
          readOnly: true
        creatorUid:
          title: creator uid from authn token
          type: string
          readOnly: true
        catalogUid:
          title: catalog uid
          type: string
          readOnly: true
        createTime:
          title: create time
          type: string
          format: date-time
          readOnly: true
        updateTime:
          title: update time
          type: string
          format: date-time
          readOnly: true
        deleteTime:
          title: delete time
          type: string
          format: date-time
          readOnly: true
        size:
          title: file size in bytes
          type: string
          format: int64
          readOnly: true
        totalChunks:
          title: total chunks
          type: integer
          format: int32
          readOnly: true
        totalTokens:
          title: total tokens
          type: integer
          format: int32
          readOnly: true
        externalMetadata:
          title: Custom metadata provided by the user during file upload
          type: object
        objectUid:
          type: string
          description: "objectUid in blob storage. user can upload to blob storage directly, then put objectUid here.\nthen no need the base64 encoding for the file content."
        summary:
          title: summary of the file
          type: string
          readOnly: true
        downloadUrl:
          title: download url of the file
          type: string
          readOnly: true
    FileCell:
      required:
        - objectUid
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of the file resource.
          readOnly: true
        fileUid:
          type: string
          description: The File UID of the file resource.
          readOnly: true
        objectUid:
          type: string
          description: The UID of the raw object that the file resource belongs to.
        name:
          title: File name
          type: string
          readOnly: true
        mimeType:
          type: string
          description: MIME type of the file.
          readOnly: true
        catalogId:
          type: string
          description: The catalog ID of the file resource.
          readOnly: true
        fileUrl:
          type: string
          description: The URL of the file resource.
          readOnly: true
      description: FileCell represents a cell with a file resource.
    FileMediaType:
      enum:
        - FILE_MEDIA_TYPE_DOCUMENT
        - FILE_MEDIA_TYPE_IMAGE
        - FILE_MEDIA_TYPE_AUDIO
        - FILE_MEDIA_TYPE_VIDEO
      type: string
      description: "FileMediaType describes the type of a catalog file.\n\n - FILE_MEDIA_TYPE_DOCUMENT: Document.\n - FILE_MEDIA_TYPE_IMAGE: Image.\n - FILE_MEDIA_TYPE_AUDIO: Audio.\n - FILE_MEDIA_TYPE_VIDEO: Video."
    FileProcessStatus:
      title: file embedding process status
      enum:
        - FILE_PROCESS_STATUS_NOTSTARTED
        - FILE_PROCESS_STATUS_WAITING
        - FILE_PROCESS_STATUS_CONVERTING
        - FILE_PROCESS_STATUS_CHUNKING
        - FILE_PROCESS_STATUS_EMBEDDING
        - FILE_PROCESS_STATUS_COMPLETED
        - FILE_PROCESS_STATUS_FAILED
        - FILE_PROCESS_STATUS_SUMMARIZING
      type: string
      description: "- FILE_PROCESS_STATUS_NOTSTARTED: NOTSTARTED\n - FILE_PROCESS_STATUS_WAITING: file is waiting for embedding process\n - FILE_PROCESS_STATUS_CONVERTING: file is converting\n - FILE_PROCESS_STATUS_CHUNKING: file is chunking\n - FILE_PROCESS_STATUS_EMBEDDING: file is embedding\n - FILE_PROCESS_STATUS_COMPLETED: completed\n - FILE_PROCESS_STATUS_FAILED: failed\n - FILE_PROCESS_STATUS_SUMMARIZING: file is summarizing"
    FileReference:
      required:
        - name
        - type
        - size
        - url
      type: object
      properties:
        name:
          type: string
          description: Name of the file.
        type:
          type: string
          description: 'Format of the file (e.g., PDF, TXT, JPG).'
        size:
          type: string
          description: Size of the file in bytes.
          format: int64
        url:
          type: string
          description: 'URL of the file (e.g., S3 URL).'
      description: FileReference represents metadata for a file.
    FileType:
      title: file type
      enum:
        - FILE_TYPE_TEXT
        - FILE_TYPE_PDF
        - FILE_TYPE_MARKDOWN
        - FILE_TYPE_PNG
        - FILE_TYPE_JPEG
        - FILE_TYPE_JPG
        - FILE_TYPE_HTML
        - FILE_TYPE_DOCX
        - FILE_TYPE_DOC
        - FILE_TYPE_PPT
        - FILE_TYPE_PPTX
        - FILE_TYPE_XLS
        - FILE_TYPE_XLSX
        - FILE_TYPE_CSV
      type: string
      description: "- FILE_TYPE_TEXT: text\n - FILE_TYPE_PDF: PDF\n - FILE_TYPE_MARKDOWN: MARKDOWN\n - FILE_TYPE_PNG: PNG(not supported yet)\n - FILE_TYPE_JPEG: JPEG(not supported yet)\n - FILE_TYPE_JPG: JPG(not supported yet)\n - FILE_TYPE_HTML: HTML\n - FILE_TYPE_DOCX: DOCX\n - FILE_TYPE_DOC: DOC\n - FILE_TYPE_PPT: PPT\n - FILE_TYPE_PPTX: PPTX\n - FILE_TYPE_XLS: XLS\n - FILE_TYPE_XLSX: XLSX\n - FILE_TYPE_CSV: CSV"
    Folder:
      required:
        - name
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the folder.
          readOnly: true
        name:
          type: string
          description: The name of the folder.
        description:
          type: string
          description: A description of the folder.
        metadata:
          type: object
          description: Additional metadata associated with the folder.
        createTime:
          type: string
          description: The timestamp when the folder was created.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: The timestamp when the folder was last updated.
          format: date-time
          readOnly: true
        catalogId:
          type: string
          description: The ID of the catalog that this folder is bound to.
          readOnly: true
        permission:
          allOf:
            - $ref: '#/components/schemas/Folder.Permission'
          description: Permission defines how a folder can be used.
          readOnly: true
        catalogInfo:
          allOf:
            - $ref: '#/components/schemas/CatalogInfo'
          description: The information about the catalog.
          readOnly: true
      description: Folder represents a folder resource.
    Folder.Permission:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Defines whether the folder can be modified.
      description: Permission defines how a folder can be used.
    Format:
      enum:
        - FORMAT_PLAIN
        - FORMAT_COMMAS
        - FORMAT_CURRENCY
        - FORMAT_PERCENTAGE
      type: string
      description: "Format specifies the visual representation of numbers in the column.\n\n - FORMAT_PLAIN: Plain number format without any separators or special formatting.\n - FORMAT_COMMAS: Number format with commas as thousand separators (e.g., 1,234,567).\n - FORMAT_CURRENCY: Currency format that displays values with a currency symbol.\n - FORMAT_PERCENTAGE: Percentage format that displays values with a percent symbol."
    FruitCosts:
      type: object
      properties:
        costs:
          type: number
          format: float
    GetAuthenticatedUserResponse:
      type: object
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/AuthenticatedUser'
          description: The authenticated user resource.
          readOnly: true
      description: GetAuthenticatedUserResponse contains the requested authenticated user.
    GetAuthenticatedUserSubscriptionResponse:
      type: object
      properties:
        subscription:
          allOf:
            - $ref: '#/components/schemas/UserSubscription'
          description: The subscription resource.
          readOnly: true
      description: GetAuthenticatedUserSubscriptionResponse contains the requested subscription.
    GetCatalogFileResponse:
      type: object
      properties:
        file:
          allOf:
            - $ref: '#/components/schemas/File'
          description: The file.
      description: GetCatalogFileResponse represents a response for getting a catalog file.
    GetCellResponse:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The cell resource.
          readOnly: true
      description: GetCellResponse contains the requested cell.
    GetChatFileResponse:
      title: GetChatFileResponse
      type: object
      properties:
        markdown:
          title: converted markdown content
          type: string
          format: byte
    GetChatResponse:
      title: GetChatResponse returns the chat
      type: object
      properties:
        chat:
          title: chat
          allOf:
            - $ref: '#/components/schemas/Chat'
          readOnly: true
    GetColumnDefinitionResponse:
      type: object
      properties:
        columnDefinition:
          allOf:
            - $ref: '#/components/schemas/ColumnDefinition'
          description: The column definition.
          readOnly: true
      description: GetColumnDefinitionResponse contains the requested column definition.
    GetColumnDefinitionsResponse:
      type: object
      properties:
        columnDefinitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColumnDefinition'
          description: Map of column UID to their definitions.
          readOnly: true
      description: GetColumnDefinitionsResponse contains the column definitions.
    GetFileCatalogResponse:
      title: GetFileCatalogResponse
      type: object
      properties:
        originalData:
          title: original data is encoded in base64
          type: string
        metadata:
          title: file catalog
          allOf:
            - $ref: '#/components/schemas/Metadata'
        text:
          title: text
          allOf:
            - $ref: '#/components/schemas/Text'
        chunks:
          title: chunks
          type: array
          items:
            $ref: '#/components/schemas/GetFileCatalogResponse.Chunk'
    GetFileCatalogResponse.Chunk:
      title: chunk message
      type: object
      properties:
        uid:
          title: chunk uid
          type: string
        type:
          title: 'chunk type. i.e. text, image, audio, and video'
          allOf:
            - $ref: '#/components/schemas/ChunkType'
        startPos:
          title: chunk start position
          type: integer
          format: int32
        endPos:
          title: chunk end position
          type: integer
          format: int32
        content:
          title: chunk content
          type: string
        tokensNum:
          title: chunk tokens num
          type: integer
          format: int32
        embedding:
          title: embedding. float32 array
          type: array
          items:
            type: number
            format: float
        createTime:
          title: chunk create time
          type: string
          format: date-time
        retrievable:
          title: chunk retrievable
          type: boolean
    GetFileSummaryResponse:
      title: get file summary response
      type: object
      properties:
        summary:
          title: summary of the file
          type: string
          readOnly: true
    GetFolderResponse:
      type: object
      properties:
        folder:
          allOf:
            - $ref: '#/components/schemas/Folder'
          description: The folder resource.
          readOnly: true
      description: GetFolderResponse contains the requested folder.
    GetIntegrationResponse:
      type: object
      properties:
        integration:
          allOf:
            - $ref: '#/components/schemas/Integration'
          description: The requested integration.
          readOnly: true
      description: GetIntegrationResponse contains the requested integration.
    GetModelDefinitionResponse:
      type: object
      properties:
        modelDefinition:
          allOf:
            - $ref: '#/components/schemas/ModelDefinition'
          description: The model definition resource.
          readOnly: true
      description: GetModelDefinitionResponse contains the requested model definition.
    GetModelOperationResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: The long-running operation.
          readOnly: true
      description: "GetModelOperationRequest represents a request to query a long-running\noperation."
    GetNamespaceConnectionResponse:
      type: object
      properties:
        connection:
          allOf:
            - $ref: '#/components/schemas/Connection'
          description: The requested connection.
          readOnly: true
      description: GetNamespaceConnectionResponse contains the requested connection.
    GetNamespaceLatestModelOperationResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: The long-running operation.
          readOnly: true
      description: "GetNamespaceLatestModelOperationResponse represents a response to query a\nlong-running operation."
    GetNamespaceModelOperationResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: The long-running operation.
      description: "GetNamespaceModelOperationResponse represents a response to query a\nlong-running operation."
    GetNamespaceModelResponse:
      type: object
      properties:
        model:
          allOf:
            - $ref: '#/components/schemas/Model'
          description: The model resource.
          readOnly: true
      description: GetNamespaceModelResponse contains the requested model.
    GetNamespacePipelineReleaseResponse:
      type: object
      properties:
        release:
          allOf:
            - $ref: '#/components/schemas/PipelineRelease'
          description: The pipeline release resource.
          readOnly: true
      description: GetNamespacePipelineReleaseResponse contains the requested pipeline release.
    GetNamespacePipelineResponse:
      type: object
      properties:
        pipeline:
          allOf:
            - $ref: '#/components/schemas/Pipeline'
          description: The pipeline resource.
          readOnly: true
      description: GetNamespacePipelineResponse contains the requested pipeline.
    GetNamespaceSecretResponse:
      type: object
      properties:
        secret:
          allOf:
            - $ref: '#/components/schemas/Secret'
          description: The secret resource.
      description: GetNamespaceSecretResponse contains the requested secret.
    GetObjectDownloadURLResponse:
      title: GetObjectDownloadURLResponse
      type: object
      properties:
        downloadUrl:
          title: download url
          type: string
        urlExpireAt:
          title: expire at in UTC (UTC+0)
          type: string
          format: date-time
        object:
          title: object
          allOf:
            - $ref: '#/components/schemas/AIObject'
    GetObjectResponse:
      title: GetObjectResponse
      type: object
      properties:
        object:
          title: object
          allOf:
            - $ref: '#/components/schemas/AIObject'
    GetObjectURLResponse:
      title: GetObjectURLResponse
      type: object
      properties:
        objectUrl:
          title: object url
          allOf:
            - $ref: '#/components/schemas/ObjectURL'
    GetObjectUploadURLResponse:
      title: GetObjectUploadURLResponse
      type: object
      properties:
        uploadUrl:
          title: upload url
          type: string
        urlExpireAt:
          title: expire at in UTC (UTC+0)
          type: string
          format: date-time
        object:
          title: object
          allOf:
            - $ref: '#/components/schemas/AIObject'
    GetOperationResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: The long-running operation.
          readOnly: true
      description: GetOperationResponse contains the long-running operation details.
    GetOrganizationAdminResponse:
      title: GetOrganizationAdminResponse represents a response for a organization resource
      type: object
      properties:
        organization:
          title: A organization resource
          allOf:
            - $ref: '#/components/schemas/Organization'
    GetOrganizationMembershipResponse:
      type: object
      properties:
        membership:
          allOf:
            - $ref: '#/components/schemas/OrganizationMembership'
          description: The requested organization membership.
          readOnly: true
      description: GetOrganizationMembershipResponse contains the organization membership.
    GetOrganizationResponse:
      type: object
      properties:
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: The organization resource.
          readOnly: true
      description: GetOrganizationResponse contains the requested organization.
    GetOrganizationSubscriptionAdminResponse:
      title: GetOrganizationSubscriptionAdminResponse
      type: object
      properties:
        subscription:
          title: Subscription
          allOf:
            - $ref: '#/components/schemas/OrganizationSubscription'
    GetOrganizationSubscriptionResponse:
      type: object
      properties:
        subscription:
          allOf:
            - $ref: '#/components/schemas/OrganizationSubscription'
          description: The subscription resource.
          readOnly: true
      description: GetOrganizationSubscriptionResponse contains the requested subscription.
    GetRemainingCreditAdminResponse:
      type: object
      properties:
        amount:
          type: number
          description: The requested credit.
          format: float
      description: "GetRemainingCreditAdminResponse contains the remaining credit of a user or\norganization."
    GetRemainingCreditResponse:
      type: object
      properties:
        perishable:
          type: number
          description: 'Amount of perishable credit, i.e. credit with an expiration date.'
          format: float
          readOnly: true
        imperishable:
          type: number
          description: "Amount of imperishable credit, e.g. purchased credit, which doesn't\nexpire."
          format: float
          readOnly: true
        total:
          type: number
          description: Total remaining credit.
          format: float
          readOnly: true
      description: "GetRemainingCreditResponse contains the remaining credit of a user or\norganization."
    GetRepositoryTagResponse:
      type: object
      properties:
        tag:
          allOf:
            - $ref: '#/components/schemas/RepositoryTag'
          description: The created tag.
      description: GetRepositoryTagResponse contains the created tag.
    GetRowResponse:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: The row resource.
          readOnly: true
      description: GetRowResponse contains the requested row.
    GetSourceFileResponse:
      title: get source file response
      type: object
      properties:
        sourceFile:
          title: source file(either original file or converted file)
          allOf:
            - $ref: '#/components/schemas/SourceFile'
          readOnly: true
    GetTableEventsResponse:
      type: object
      properties:
        event:
          allOf:
            - $ref: '#/components/schemas/TableEvent'
          description: The events for the table.
          readOnly: true
      description: GetTableEventsResponse contains the events for a table.
    GetTableResponse:
      type: object
      properties:
        table:
          allOf:
            - $ref: '#/components/schemas/Table'
          description: The table resource.
          readOnly: true
      description: GetTableResponse contains the requested table.
    GetTokenResponse:
      type: object
      properties:
        token:
          allOf:
            - $ref: '#/components/schemas/ApiToken'
          description: The API token resource.
          readOnly: true
      description: GetTokenResponse contains the requested token.
    GetUserAdminResponse:
      title: GetUserAdminResponse represents a response for a user resource
      type: object
      properties:
        user:
          title: A user resource
          allOf:
            - $ref: '#/components/schemas/.User'
    GetUserMembershipResponse:
      type: object
      properties:
        membership:
          allOf:
            - $ref: '#/components/schemas/UserMembership'
          description: The requested user membership.
          readOnly: true
      description: GetUserMembershipResponse contains the user membership.
    GetUserResponse:
      type: object
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: The user resource.
          readOnly: true
      description: GetUserResponse contains the requested user.
    GetUserSubscriptionAdminResponse:
      title: GetUserSubscriptionAdminResponse
      type: object
      properties:
        subscription:
          title: Subscription
          allOf:
            - $ref: '#/components/schemas/UserSubscription'
    Hardware:
      type: object
      properties:
        title:
          title: Hardware display title
          type: string
        value:
          title: Hardware name value
          type: string
      description: Hardware describes the hardware title and string value that backend consumes.
    HealthzResponse:
      type: object
      properties:
        message:
          type: string
    InsertRowBody:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: The rows to insert.
        beforeRowUid:
          type: string
          description: The unique identifier of the row to insert before.
      description: InsertRowRequest represents a request to insert a row into a table.
    InsertRowResponse:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: The inserted row resource.
          readOnly: true
      description: InsertRowResponse contains the inserted row.
    Integration:
      type: object
      properties:
        uid:
          type: string
          description: UUID-formatted unique identifier. It references a component definition.
          readOnly: true
        id:
          type: string
          description: "Identifier of the integration, which references a component definition.\nComponents with that definition ID will be able to use the connections\nproduced by this integration."
          readOnly: true
        title:
          type: string
          description: 'Title, reflects the app name.'
          readOnly: true
        description:
          type: string
          description: Short description of the integrated app.
          readOnly: true
        vendor:
          type: string
          description: Integrated app vendor name.
          readOnly: true
        icon:
          type: string
          description: "Integration icon. This is a path that's relative to the root of\nthe component implementation and that allows frontend applications to pull\nand locate the icons.\nSee the `icon` field in the `ComponentDefinition` entity for more\ninformation."
          readOnly: true
        helpLink:
          allOf:
            - $ref: '#/components/schemas/Link'
          description: Reference to the vendor's documentation to expand the integration details.
          readOnly: true
        setupSchema:
          type: object
          description: "The connection setup field definitions. Each integration will require\ndifferent data to connect to the 3rd party app."
          readOnly: true
        oAuthConfig:
          allOf:
            - $ref: '#/components/schemas/OAuthConfig'
          description: "Configuration parameters required for the OAuth setup flow. This field\nwill be present only if the integration supports OAuth 2.0."
          readOnly: true
        view:
          title: "View defines how the integration is presented. The following fields are\nonly shown in the FULL view:\n- setupSchema\n- oAuthConfig"
          allOf:
            - $ref: '#/components/schemas/pipeline.v1beta.View'
          readOnly: true
      description: "Integration contains the parameters to create a connection between\ncomponents and 3rd party apps."
    Link:
      type: object
      properties:
        text:
          type: string
          description: Text contains the message to display.
          readOnly: true
        url:
          type: string
          description: URL contains the reference the link will redirect to.
          readOnly: true
      description: Link contains the information to display an reference to an external URL.
    ListApplicationsResponse:
      type: object
      properties:
        applicationNames:
          type: array
          items:
            type: string
    ListAvailableRegionsResponse:
      type: object
      properties:
        regions:
          title: A list of available region
          type: array
          items:
            $ref: '#/components/schemas/Region'
          readOnly: true
      description: "ListAvailableRegionsResponse contains a list of available\nregions and hardware types a model can be deployed on."
    ListCatalogFilesFilter:
      title: "list file filter\ntodo: support more parameters"
      type: object
      properties:
        fileUids:
          type: array
          items:
            type: string
          description: The file uids.
    ListCatalogFilesResponse:
      title: list files response
      required:
        - files
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: The list of files.
        totalSize:
          type: integer
          description: The total number of files.
          format: int32
        pageSize:
          type: integer
          description: The requested page size.
          format: int32
        nextPageToken:
          title: next page token
          type: string
        filter:
          allOf:
            - $ref: '#/components/schemas/ListCatalogFilesFilter'
          description: The filter.
    ListCatalogRunsResponse:
      type: object
      properties:
        catalogRuns:
          type: array
          items:
            $ref: '#/components/schemas/CatalogRun'
          description: The list of runs.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of runs matching the request.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The current page number.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          readOnly: true
      description: ListCatalogRunsResponse is the response message for ListCatalogRuns.
    ListCatalogsResponse:
      type: object
      properties:
        catalogs:
          type: array
          items:
            $ref: '#/components/schemas/Catalog'
          description: The catalogs container.
      description: GetCatalogsResponse represents a response for getting all catalogs from users.
    ListCellAutofillAgentMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/agent.v1alpha.Message'
          description: The messages in the cell.
          readOnly: true
        nextPageToken:
          type: string
          description: The token for the next page of results.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of messages.
          format: int32
          readOnly: true
      description: ListCellAutofillAgentMessagesResponse is a response to a request to list messages in a cell.
    ListChatTablesResponse:
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
          description: The tables bound to the chat.
          readOnly: true
      description: ListChatTablesResponse contains the list of tables bound to a chat.
    ListChatsResponse:
      title: ListChatsResponse returns a list of chats
      type: object
      properties:
        chats:
          title: chats
          type: array
          items:
            $ref: '#/components/schemas/Chat'
          readOnly: true
        nextPageToken:
          title: next page token
          type: string
          readOnly: true
        totalSize:
          title: total size
          type: integer
          format: int32
          readOnly: true
    ListChunksResponse:
      type: object
      properties:
        chunks:
          title: repeated chunks
          type: array
          items:
            $ref: '#/components/schemas/.Chunk'
          readOnly: true
      description: The ListChunksResponse message represents a response containing a list of chunks in the artifact system.
    ListComponentDefinitionsResponse:
      type: object
      properties:
        componentDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDefinition'
          description: A list of component definition resources.
        totalSize:
          type: integer
          description: Total number of component definitions.
          format: int32
        pageSize:
          type: integer
          description: The requested page size.
          format: int32
        page:
          type: integer
          description: The requested page offset.
          format: int32
      description: ListComponentDefinitionsResponse contains a list of component definitions.
    ListComponentRunsResponse:
      type: object
      properties:
        componentRuns:
          type: array
          items:
            $ref: '#/components/schemas/ComponentRun'
          description: The list of component runs.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of component runs matching the request.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The current page number.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          readOnly: true
      description: ListComponentRunsResponse is the response message for ListComponentRuns.
    ListCreditConsumptionChartRecordsResponse:
      type: object
      properties:
        creditConsumptionChartRecords:
          type: array
          items:
            $ref: '#/components/schemas/CreditConsumptionChartRecord'
          description: 'Credit consumption timelines, aggregated by source.'
      description: "ListCreditConsumptionChartRecordsResponse contains a list of credit consumption\nchart records."
    ListFoldersResponse:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
          description: The list of folders.
          readOnly: true
        nextPageToken:
          type: string
          description: The token for the next page of results.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of tables.
          format: int32
          readOnly: true
      description: ListFoldersResponse contains the list of folders.
    ListIntegrationsResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/Integration'
          description: A list of integrations matching the request parameters.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of items.
          format: int32
          readOnly: true
      description: ListIntegrationsResponse contains a paginated list of integrations.
    ListMessagesResponse:
      title: ListMessagesResponse returns a list of messages
      type: object
      properties:
        messages:
          title: messages
          type: array
          items:
            $ref: '#/components/schemas/agent.v1alpha.Message'
          readOnly: true
        nextPageToken:
          title: next page token
          type: string
          readOnly: true
        totalSize:
          title: total size
          type: integer
          format: int32
          readOnly: true
        senderProfiles:
          title: message sender profiles
          type: array
          items:
            $ref: '#/components/schemas/MessageSenderProfile'
          readOnly: true
    ListModelDefinitionsResponse:
      type: object
      properties:
        modelDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ModelDefinition'
          description: A list of model definition resources.
        nextPageToken:
          type: string
          description: Next page token.
        totalSize:
          type: integer
          description: Total number of model definitions.
          format: int32
      description: ListModelDefinitionsResponse contains a list of model definitions.
    ListModelRunsByRequesterResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/ModelRun'
          description: A list of runs resources.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of runs.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The requested page size.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The requested page offset.
          format: int32
          readOnly: true
      description: "ListModelRunsByRequesterResponse is the request message for\nListModelRunsByRequester."
    ListModelRunsResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/ModelRun'
          description: A list of runs resources.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of runs.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The requested page size.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The requested page offset.
          format: int32
          readOnly: true
      description: ListModelRunsResponse contains a list of model runs.
    ListModelTriggerChartRecordsResponse:
      type: object
      properties:
        modelTriggerChartRecords:
          type: array
          items:
            $ref: '#/components/schemas/ModelTriggerChartRecord'
          description: "Model trigger counts. Until we allow filtering or grouping by fields\nlike model ID, this list will contain only one element with the\ntimeline of trigger counts for a given requester, regardless the model\nID, trigger mode, final status or other fields."
      description: "ListModelTriggerChartRecordsResponse contains a list of model trigger\nchart records."
    ListModelsAdminResponse:
      title: ListModelsAdminResponse represents a response for a list of models
      type: object
      properties:
        models:
          title: a list of Models
          type: array
          items:
            $ref: '#/components/schemas/Model'
        nextPageToken:
          title: Next page token
          type: string
        totalSize:
          type: integer
          description: Total number of models.
          format: int32
    ListModelsResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
          description: A list of model resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of models.
          format: int32
          readOnly: true
      description: ListModelsResponse contains a list of models.
    ListNamespaceConnectionsResponse:
      type: object
      properties:
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
          description: A list of connections matching the request parameters.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of items.
          format: int32
          readOnly: true
      description: ListNamespaceConnectionsResponse contains a paginated list of connections.
    ListNamespaceModelVersionsResponse:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ModelVersion'
          description: A list of model resources.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of versions.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The requested page size.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The requested page offset.
          format: int32
          readOnly: true
      description: ListNamespaceModelVersionsResponse contains a list of models.
    ListNamespaceModelsResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
          description: A list of model resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of models.
          format: int32
          readOnly: true
      description: ListNamespaceModelsResponse contains a list of models.
    ListNamespacePipelineReleasesResponse:
      type: object
      properties:
        releases:
          type: array
          items:
            $ref: '#/components/schemas/PipelineRelease'
          description: A list of pipeline release resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of pipeline releases.
          format: int32
          readOnly: true
      description: ListNamespacePipelineReleasesResponse contains a list of pipeline releases.
    ListNamespacePipelinesResponse:
      type: object
      properties:
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/Pipeline'
          description: A list of pipeline resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of pipelines.
          format: int32
          readOnly: true
      description: ListNamespacePipelinesResponse contains a list of pipelines.
    ListNamespaceSecretsResponse:
      type: object
      properties:
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/Secret'
          description: A list of secret resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page secret.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of secret resources.
          format: int32
          readOnly: true
      description: ListNamespaceSecretsResponse contains a list of secrets.
    ListOrganizationMembershipsResponse:
      type: object
      properties:
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMembership'
          description: "The organization memberships, i.e., the users that belong to the\norganization."
          readOnly: true
      description: ListOrganizationMembershipsResponse contains a list of memberships.
    ListOrganizationsAdminResponse:
      title: ListOrganizationsAdminResponse represents a response for a list of organizations
      type: object
      properties:
        organizations:
          title: A list of organizations
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        nextPageToken:
          type: string
          description: Next page token.
        totalSize:
          type: integer
          description: Total number of organizations.
          format: int32
    ListOrganizationsResponse:
      title: ListOrganizationsResponse represents a response for a list of organizations
      type: object
      properties:
        organizations:
          title: A list of organizations
          type: array
          items:
            $ref: '#/components/schemas/Organization'
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of organizations.
          format: int32
          readOnly: true
    ListPipelineIDsByConnectionIDResponse:
      type: object
      properties:
        pipelineIds:
          type: array
          items:
            type: string
          description: A list of pipeline IDs matching the request parameters.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of items.
          format: int32
          readOnly: true
      description: ListPipelineIDsByConnectionIDResponse contains a paginated list of integrations.
    ListPipelineReleasesAdminResponse:
      type: object
      properties:
        releases:
          type: array
          items:
            $ref: '#/components/schemas/PipelineRelease'
          description: A list of pipeline releases.
        nextPageToken:
          type: string
          description: Next page token.
        totalSize:
          type: integer
          description: Total number of pipeline releases.
          format: int32
      description: "ListPipelineReleasesAdminResponse contains a list of pipeline releases\nrequested by an admin user.\nFor the moment, the pipeline recipes will be UID-based (permalink) instead\nof name-based. This is a temporary solution."
    ListPipelineRunsByRequesterResponse:
      type: object
      properties:
        pipelineRuns:
          type: array
          items:
            $ref: '#/components/schemas/PipelineRun'
          description: The list of pipeline runs.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of pipeline runs matching the request.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The current page number.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          readOnly: true
      description: ListPipelineRunsByRequesterResponse is the response message for ListPipelineRunsByRequester.
    ListPipelineRunsResponse:
      type: object
      properties:
        pipelineRuns:
          type: array
          items:
            $ref: '#/components/schemas/PipelineRun'
          description: The list of pipeline runs.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of pipeline runs matching the request.
          format: int32
          readOnly: true
        page:
          type: integer
          description: The current page number.
          format: int32
          readOnly: true
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          readOnly: true
      description: ListPipelineRunsResponse is the response message for ListPipelineRuns.
    ListPipelineTriggerChartRecordsResponse:
      type: object
      properties:
        pipelineTriggerChartRecords:
          type: array
          items:
            $ref: '#/components/schemas/PipelineTriggerChartRecord'
          description: "Pipeline trigger counts. Until we allow filtering or grouping by fields\nlike pipeline ID, this list will contain only one element with the\ntimeline of trigger counts for a given requester, regardless the pipeline\nID, trigger mode, final status or other fields."
      description: "ListPipelineTriggerChartRecordsResponse contains a list of pipeline trigger\nchart records."
    ListPipelinesAdminResponse:
      type: object
      properties:
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/Pipeline'
          description: A list of pipeline resources.
        nextPageToken:
          type: string
          description: Next page token.
        totalSize:
          type: integer
          description: Total number of pipelines.
          format: int32
      description: "ListPipelinesAdminResponse contains a list of pipelines requested by an\nadmin user.\nFor the moment, the pipeline recipes will be UID-based (permalink) instead\nof name-based. This is a temporary solution."
    ListPipelinesResponse:
      type: object
      properties:
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/Pipeline'
          description: A list of pipeline resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of pipelines.
          format: int32
          readOnly: true
      description: ListPipelinesResponse contains a list of pipelines.
    ListRepositoryTagsResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/RepositoryTag'
          description: A list of repository tags.
        totalSize:
          type: integer
          description: Total number of tags.
          format: int32
        pageSize:
          type: integer
          description: The requested page size.
          format: int32
        page:
          type: integer
          description: The requested page offset.
          format: int32
      description: ListRepositoryTagsResponse contains a list of container image tags.
    ListRowsResponse:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'
          description: The list of rows.
          readOnly: true
        nextPageToken:
          type: string
          description: The token for the next page of results.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of rows that match the request.
          format: int32
          readOnly: true
      description: ListRowsResponse contains the requested rows.
    ListTableBuilderAgentMessagesResponse:
      title: ListTableBuilderAgentMessagesResponse returns a list of messages
      type: object
      properties:
        messages:
          title: messages
          type: array
          items:
            $ref: '#/components/schemas/agent.v1alpha.Message'
          readOnly: true
        nextPageToken:
          title: next page token
          type: string
          readOnly: true
        totalSize:
          title: total size
          type: integer
          format: int32
          readOnly: true
        senderProfiles:
          title: message sender profiles
          type: array
          items:
            $ref: '#/components/schemas/MessageSenderProfile'
          readOnly: true
    ListTablesResponse:
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
          description: The list of tables.
          readOnly: true
        nextPageToken:
          type: string
          description: The token for the next page of results.
          readOnly: true
        totalSize:
          type: integer
          description: The total number of tables.
          format: int32
          readOnly: true
      description: ListTablesResponse contains the list of tables.
    ListTokensResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/ApiToken'
          description: A list of API token resources.
        nextPageToken:
          type: string
          description: Next page token.
        totalSize:
          type: integer
          description: Total number of API token resources.
          format: int32
      description: ListTokensResponse contains a list of API tokens.
    ListUserMembershipsResponse:
      type: object
      properties:
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/UserMembership'
          description: 'The user memberships, i.e., the organizations the user belongs to.'
          readOnly: true
      description: ListUserMembershipsResponse contains a list of memberships.
    ListUsersAdminResponse:
      title: ListUsersAdminResponse represents a response for a list of users
      type: object
      properties:
        users:
          title: A list of users
          type: array
          items:
            $ref: '#/components/schemas/.User'
        nextPageToken:
          type: string
          description: Next page token.
        totalSize:
          type: integer
          description: Total number of users.
          format: int32
    ListUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/.User'
          description: A list of user resources.
          readOnly: true
        nextPageToken:
          type: string
          description: Next page token.
          readOnly: true
        totalSize:
          type: integer
          description: Total number of users.
          format: int32
          readOnly: true
      description: ListUsersResponse contains a list of users.
    LockCellBody:
      type: object
      description: LockCellRequest represents a request to lock a cell.
    LockCellResponse:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The updated cell resource.
          readOnly: true
      description: LockCellResponse is an empty response for locking a cell.
    LockState:
      enum:
        - LOCK_STATE_LOCKED
        - LOCK_STATE_UNLOCKED
      type: string
      description: "The lock state of a cell.\n\n - LOCK_STATE_LOCKED: The cell is locked.\n - LOCK_STATE_UNLOCKED: The cell is unlocked."
    LookUpConnectionAdminResponse:
      type: object
      properties:
        connection:
          allOf:
            - $ref: '#/components/schemas/Connection'
          description: The requested connection.
          readOnly: true
      description: LookUpConnectionAdminResponse contains the requested connection.
    LookUpModelAdminResponse:
      title: LookUpModelResponse represents a response for a model
      type: object
      properties:
        model:
          title: A model resource
          allOf:
            - $ref: '#/components/schemas/Model'
    LookUpOrganizationAdminResponse:
      title: LookUpOrganizationAdminResponse represents a response for a organization resource by admin
      type: object
      properties:
        organization:
          title: A organization resource
          allOf:
            - $ref: '#/components/schemas/Organization'
    LookUpPipelineAdminResponse:
      type: object
      properties:
        pipeline:
          allOf:
            - $ref: '#/components/schemas/Pipeline'
          description: The requested pipeline.
      description: LookUpPipelineAdminResponse contains the requested pipeline.
    LookUpUserAdminResponse:
      title: LookUpUserAdminResponse represents a response for a user resource by admin
      type: object
      properties:
        user:
          title: A user resource
          allOf:
            - $ref: '#/components/schemas/.User'
    MembershipState:
      enum:
        - MEMBERSHIP_STATE_ACTIVE
        - MEMBERSHIP_STATE_PENDING
      type: string
      description: "MembershipState describes the state of a user membership to an organization.\n\n - MEMBERSHIP_STATE_ACTIVE: Active.\n - MEMBERSHIP_STATE_PENDING: Pending, i.e., a request has been sent to the user to join an\norganization."
    MessageSenderProfile:
      type: object
      properties:
        msgSenderUid:
          title: sender uid
          type: string
          readOnly: true
        msgSenderId:
          title: sender id
          type: string
          readOnly: true
        displayName:
          type: string
          description: Display name.
          readOnly: true
        avatar:
          type: string
          description: Avatar url. this url might be expired or not exist.
          readOnly: true
      description: "MessageSenderProfile describes the public data of a message sender.\nrefer to core.mgmt.v1beta.UserProfile for more details."
    MessageType:
      title: message type
      enum:
        - MESSAGE_TYPE_TEXT
      type: string
      description: '- MESSAGE_TYPE_TEXT: text'
    Metadata:
      title: metadata
      type: object
      properties:
        fileUid:
          title: file uid
          type: string
        fileId:
          title: file id
          type: string
        fileType:
          title: file type
          allOf:
            - $ref: '#/components/schemas/FileType'
        fileSize:
          title: file size in bytes
          type: string
          format: int64
        fileUploadTime:
          title: upload time
          type: string
          format: date-time
        fileProcessStatus:
          title: file process status
          allOf:
            - $ref: '#/components/schemas/FileProcessStatus'
    Method:
      enum:
        - METHOD_DICTIONARY
        - METHOD_OAUTH
      type: string
      description: "Method defines how the connection is set up.\n\n - METHOD_DICTIONARY: Key-value collection. The user is responsible of fetching the connection\ndetails from the 3rd party service.\n - METHOD_OAUTH: Access token created via OAuth 2.0 authorization."
    Model:
      title: "Model represents an AI model, i.e. a program that performs tasks as decision\nmaking or or pattern recognition based on its training data"
      required:
        - id
        - modelDefinition
        - configuration
        - task
        - visibility
        - region
        - hardware
      type: object
      properties:
        name:
          type: string
          description: "The resource name of the model, which allows its access by owner and ID.\n- Format: `users/{user.id}/models/{model.id}`."
          readOnly: true
        uid:
          type: string
          description: Model UUID.
          readOnly: true
        id:
          type: string
          description: "Model resource ID (used in `name` as the last segment). This conforms to\nRFC-1034, which restricts to letters, numbers, and hyphen, with the first\ncharacter a letter, the last a letter or a number, and a 63 character\nmaximum."
        description:
          type: string
          description: Model description.
        modelDefinition:
          type: string
          description: The model definition that has been used to import the model.
        configuration:
          type: object
          description: "Model configuration. This field is validated against the model\nspecification in the model definition (i.e. the `model_spec` field in the\nmodel definition)."
        task:
          allOf:
            - $ref: '#/components/schemas/AITask'
          description: Model task.
        visibility:
          allOf:
            - $ref: '#/components/schemas/Model.Visibility'
          description: Model visibility.
        createTime:
          type: string
          description: Model creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Model update time.
          format: date-time
          readOnly: true
        deleteTime:
          type: string
          description: Model deletion time.
          format: date-time
          readOnly: true
        ownerName:
          type: string
          description: Resource name of the owner.
          readOnly: true
        owner:
          allOf:
            - $ref: '#/components/schemas/Owner'
          description: Model owner.
          readOnly: true
        region:
          type: string
          description: Region of choice for the particular provider to host the model.
        hardware:
          type: string
          description: Hardware of choice to serve the model.
        readme:
          type: string
          description: README holds the model documentation.
        sourceUrl:
          type: string
          description: A link to the source code of the model (e.g. to a GitHub repository).
        documentationUrl:
          type: string
          description: A link to any extra information.
        license:
          type: string
          description: License under which the model is distributed.
        profileImage:
          type: string
          description: Model profile image in base64 format.
        permission:
          allOf:
            - $ref: '#/components/schemas/.Permission'
          description: Permission defines how a pipeline can be used.
          readOnly: true
        inputSchema:
          title: Input schema for the model
          type: object
          readOnly: true
        outputSchema:
          title: Output schema for the model
          type: object
          readOnly: true
        tags:
          type: array
          items:
            type: string
          description: Tags.
          readOnly: true
        versions:
          type: array
          items:
            type: string
          description: Version names.
          readOnly: true
        stats:
          allOf:
            - $ref: '#/components/schemas/Model.Stats'
          description: Statistic data.
          readOnly: true
    Model.Stats:
      title: Statistic data
      type: object
      properties:
        numberOfRuns:
          type: integer
          description: Number of model runs.
          format: int32
          readOnly: true
        lastRunTime:
          type: string
          description: Last run time.
          format: date-time
          readOnly: true
    Model.Visibility:
      enum:
        - VISIBILITY_PRIVATE
        - VISIBILITY_PUBLIC
      type: string
      description: "Visibility defines who can access the model.\n\n - VISIBILITY_PRIVATE: Only the owner can see the model.\n - VISIBILITY_PUBLIC: Other users can see the model."
    ModelDefinition:
      type: object
      properties:
        name:
          type: string
          description: "The resource name of the model, which allows its access by ID.\n- Format: `model-definitions/{id}`."
          readOnly: true
        uid:
          type: string
          description: Model definition UUID.
          readOnly: true
        id:
          type: string
          description: "Model definition resource ID (used in `name` as the last segment). This\nconforms to RFC-1034, which restricts to letters, numbers, and hyphen,\nwith the first character a letter, the last a letter or a number, and a 63\ncharacter maximum."
          readOnly: true
        title:
          type: string
          description: Official display title.
          readOnly: true
        documentationUrl:
          type: string
          description: Documentation URL.
          readOnly: true
        icon:
          type: string
          description: Display icon.
          readOnly: true
        releaseStage:
          allOf:
            - $ref: '#/components/schemas/.ReleaseStage'
          description: Release stage.
          readOnly: true
        modelSpec:
          type: object
          description: "The model specification represented by a JSON schema. It is used to\nvalidate the JSON configurations of a model created from a specific model\nsource, and the resource spec which the model is desired to be deployed on.\nIt must be a valid JSON that includes what fields are needed to\ncreate or display a model."
          readOnly: true
        createTime:
          type: string
          description: Creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Update time.
          format: date-time
          readOnly: true
      description: ModelDefinition defines how to configure and import a model.
    ModelOutput:
      type: object
      properties:
        output:
          type: number
          format: float
    ModelRun:
      type: object
      properties:
        uid:
          type: string
          description: Model Run UUID.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
          description: Model run status.
          readOnly: true
        source:
          allOf:
            - $ref: '#/components/schemas/RunSource'
          description: Run source.
          readOnly: true
        totalDuration:
          type: integer
          description: Run total duration in milliseconds.
          format: int32
          readOnly: true
        endTime:
          type: string
          description: Run end time.
          format: date-time
          readOnly: true
        runnerId:
          type: string
          description: "Runner ID. If current viewing requester does not have enough permission, it\nwill return null."
          readOnly: true
        creditAmount:
          type: number
          description: "The amount of Instill Credit consumed by the run. This field will only be\npresent on Instill Cloud."
          format: float
          readOnly: true
        error:
          type: string
          description: Error message occurred during model run.
          readOnly: true
        createTime:
          type: string
          description: Model run created time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Model run updated time.
          format: date-time
          readOnly: true
        version:
          type: string
          description: 'The model version identifier, which is same as image tag.'
          readOnly: true
        taskInputs:
          type: array
          items:
            type: object
          description: Model inference input.
          readOnly: true
        taskOutputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
        modelId:
          type: string
          description: Model ID.
          readOnly: true
        requesterId:
          type: string
          description: "Requester ID. The namespace used to trigger the run. This field might be\nempty if the model run belongs to a deleted namespace."
          readOnly: true
        modelNamespaceId:
          type: string
          description: ID of the namespace that owns the model.
          readOnly: true
      description: ModelRun contains information about a run of models.
    ModelTriggerChartRecord:
      type: object
      properties:
        modelId:
          type: string
          description: This field will be present present when the information is grouped by model.
          readOnly: true
        timeBuckets:
          type: array
          items:
            type: string
            format: date-time
          description: Time buckets.
          readOnly: true
        triggerCounts:
          type: array
          items:
            type: integer
            format: int32
          description: Aggregated trigger count in each time bucket.
          readOnly: true
        requesterId:
          type: string
          description: The ID of the namespace that requested the model triggers.
          readOnly: true
      description: "ModelTriggerChartRecord represents a timeline of model triggers. It\ncontains a collection of (timestamp, count) pairs that represent the total\nmodel triggers in a given time bucket."
    ModelVersion:
      type: object
      properties:
        name:
          type: string
          description: "The parent resource, i.e., the user that created the models.\n- Format: `users/{user.id}`.\nThe resource name of the model, which allows its access by parent user\nand ID.\n- Format: `users/{user.id}/models/{model.id}`.\nThe name of the Version.\n- Format: `users/{user.id}/models/{model.id}/versions/{version.id}`."
        version:
          type: string
          description: 'The model version identifier, which is equal to image tag.'
        digest:
          type: string
          description: 'Unique identifier, computed from the manifest the Version refers to.'
        state:
          allOf:
            - $ref: '#/components/schemas/.State'
          description: Current state of this model version.
          readOnly: true
        updateTime:
          type: string
          description: 'Version update time, i.e. timestamp of the last push.'
          format: date-time
          readOnly: true
      description: ModelVersion contains information about the version of a model.
    MoveFileToCatalogBody:
      required:
        - fileUid
        - toCatalogId
      type: object
      properties:
        fileUid:
          type: string
          description: The file uid.
        toCatalogId:
          type: string
          description: The target catalog id.
      description: MoveFileToCatalogRequest represents a request to move a file to another catalog.
    MoveFileToCatalogResponse:
      type: object
      properties:
        fileUid:
          type: string
          description: The file uid.
      description: MoveFileToCatalogResponse represents a response for moving a file to another catalog.
    MoveRowsBody:
      required:
        - rowUids
      type: object
      properties:
        rowUids:
          type: array
          items:
            type: string
          description: The unique identifiers of the rows to be moved.
        beforeRowUid:
          type: string
          description: The unique identifier of the row to move before.
      description: MoveRowsRequest represents a request to move multiple rows.
    MoveRowsResponse:
      type: object
      description: MoveRowsResponse is an empty response for moving multiple rows.
    NullValue:
      type: string
      description: "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`."
    NumberCell:
      type: object
      properties:
        userInput:
          type: number
          description: The value of the cell that directly set by the user.
          format: double
        computedValue:
          type: number
          description: The value of the cell that was computed by the automatic computation.
          format: double
          readOnly: true
      description: NumberCell represents a cell with a number value.
    NumberFormat:
      required:
        - format
      type: object
      properties:
        format:
          allOf:
            - $ref: '#/components/schemas/Format'
          description: The specific format to apply to numbers in this column.
        decimalPlaces:
          type: integer
          description: "Number of decimal places to display (e.g., 2 would show 1.23).\nIf not specified, a default appropriate to the format will be used."
          format: int32
        currencyCode:
          type: string
          description: "ISO 4217 currency code (e.g., \"USD\", \"EUR\", \"JPY\") for currency format.\nRequired when format is FORMAT_CURRENCY, ignored for other formats."
      description: NumberFormat defines the display format for number type columns.
    OAuthConfig:
      type: object
      properties:
        authUrl:
          type: string
          description: "The URL of the OAuth server to initiate the authentication and\nauthorization process."
          readOnly: true
        accessUrl:
          type: string
          description: "The URL of the OAuth server to exchange the authorization code for an\naccess token."
          readOnly: true
        scopes:
          type: array
          items:
            type: string
          description: "A list of scopes that identify the resources that the connection will be\nable to access on the user's behalf."
          readOnly: true
      description: "OAuthConfig contains the configuration parameters for fetching an access\ntoken via an OAuth 2.0 flow."
    AIObject:
      title: Object
      type: object
      properties:
        uid:
          title: uid
          type: string
        name:
          title: name of the object
          type: string
        size:
          title: size in bytes
          type: string
          format: int64
        contentType:
          title: "content type\nthis is mime type from content-type header of http request or from file extension"
          type: string
        namespaceUid:
          title: namespace uid
          type: string
        creator:
          title: creator
          type: string
        isUploaded:
          title: if file is uploaded
          type: boolean
        path:
          title: object path(optional)
          type: string
        objectExpireDays:
          title: "object live time in days\nif set to 0, the object will not be deleted automatically"
          type: integer
          format: int32
        lastModifiedTime:
          title: last modified time
          type: string
          format: date-time
        createdTime:
          title: created time
          type: string
          format: date-time
        updatedTime:
          title: updated time
          type: string
          format: date-time
    ObjectURL:
      title: ObjectUploadURL
      type: object
      properties:
        uid:
          title: The unique identifier of the ObjectURL
          type: string
        namespaceUid:
          title: The namespace UID associated with this ObjectURL
          type: string
        objectUid:
          title: The object UID associated with this ObjectURL
          type: string
        urlExpireAt:
          title: The expiration time of the URL
          type: string
          format: date-time
        minioUrlPath:
          title: The MinIO URL path
          type: string
        encodedUrlPath:
          title: The encoded URL path
          type: string
        type:
          title: The type of URL (download or upload)
          type: string
        createTime:
          title: The creation time of the ObjectURL
          type: string
          format: date-time
        updateTime:
          title: The last update time of the ObjectURL
          type: string
          format: date-time
        deleteTime:
          title: 'The deletion time of the ObjectURL, if applicable'
          type: string
          format: date-time
    OnboardingStatus:
      enum:
        - ONBOARDING_STATUS_IN_PROGRESS
        - ONBOARDING_STATUS_COMPLETED
      type: string
      description: "OnboardingStatus describes the status of the user onboarding process.\n\n - ONBOARDING_STATUS_IN_PROGRESS: In progress, i.e., the user has initiated the onboarding process\nbut has not yet completed it.\n - ONBOARDING_STATUS_COMPLETED: Completed."
    Option:
      type: object
      properties:
        stringValue:
          type: string
          description: The value of the cell as a string.
        numberValue:
          type: number
          description: The value of the cell as a number.
          format: double
        color:
          type: string
          description: Display color of the option.
      description: An option for the selection.
    Organization:
      required:
        - profile
      type: object
      properties:
        name:
          type: string
          description: "The name of the organization, defined by its ID.\n- Format: `organization/{organization.id}`."
          readOnly: true
        uid:
          type: string
          description: Organization UUID.
          readOnly: true
        id:
          type: string
          description: "Resource ID (used in `name` as the last segment). This conforms to\nRFC-1034, which restricts to letters, numbers, and hyphen, with the first\ncharacter a letter, the last a letter or a number, and a 63 character\nmaximum.\n\nNote that the ID can be updated."
        createTime:
          type: string
          description: Creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Update time.
          format: date-time
          readOnly: true
        owner:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: The user that owns the organization.
          readOnly: true
        profile:
          allOf:
            - $ref: '#/components/schemas/OrganizationProfile'
          description: Profile.
        permission:
          title: Permission
          allOf:
            - $ref: '#/components/schemas/mgmt.v1beta.Permission'
          readOnly: true
      description: "Organizations group several users. As entities, they can own resources such\nas pipelines or releases."
    OrganizationMembership:
      required:
        - role
      type: object
      properties:
        name:
          type: string
          description: "The resource name of the membership, which allows its access by\norganization and user ID.\n- Format: `organizations/{organization.id}/memberships/{user.id}`."
          readOnly: true
        role:
          type: string
          description: Role of the user in the organization.
        state:
          allOf:
            - $ref: '#/components/schemas/MembershipState'
          description: State of the membership.
          readOnly: true
        user:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: User information.
          readOnly: true
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: Organization information.
          readOnly: true
      description: "An organization membership defines the relationship between an organization\nand a user that is attached to it."
    OrganizationProfile:
      type: object
      properties:
        displayName:
          type: string
          description: Display name.
        bio:
          type: string
          description: Biography.
        avatar:
          type: string
          description: Avatar in base64 format.
        publicEmail:
          type: string
          description: Public email.
        socialProfileLinks:
          type: object
          additionalProperties:
            type: string
          description: "Social profile links list the links to the organization's social profiles.\nThe key represents the provider, and the value is the corresponding URL."
      description: OrganizationProfile describes the public data of an organization.
    OrganizationSubscription:
      type: object
      properties:
        plan:
          allOf:
            - $ref: '#/components/schemas/OrganizationSubscription.Plan'
          description: Plan identifier.
          readOnly: true
        detail:
          allOf:
            - $ref: '#/components/schemas/StripeSubscriptionDetail'
          description: Details of the associated Stripe subscription.
          readOnly: true
        usedSeats:
          type: integer
          description: Number of used seats within the organization subscription.
          format: int32
          readOnly: true
      description: 'OrganizationSubscription details describe the plan (i.e., features) an organization has access to.'
    OrganizationSubscription.Plan:
      enum:
        - PLAN_FREE
        - PLAN_TEAM
        - PLAN_ENTERPRISE
      type: string
      description: "Enumerates the plan types for the organization subscription.\n\n - PLAN_FREE: Free plan.\n - PLAN_TEAM: Team plan.\n - PLAN_ENTERPRISE: Enterprise plan."
    Owner:
      type: object
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: User.
          readOnly: true
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: Organization.
          readOnly: true
      description: 'Owner is a wrapper for User and Organization, used to embed owner information in other resources.'
    PatchAuthenticatedUserResponse:
      title: "PatchAuthenticatedUserResponse contains the updated user.\nthe authenticated user resource"
      type: object
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/AuthenticatedUser'
          description: The updated user resource.
          readOnly: true
    Pipeline:
      required:
        - recipe
      type: object
      properties:
        name:
          type: string
          description: "The name of the pipeline, defined by its parent and ID.\n- Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}`."
          readOnly: true
        uid:
          type: string
          description: Pipeline UUID.
          readOnly: true
        id:
          type: string
          description: "Pipeline resource ID (used in `name` as the last segment). This conforms\nto RFC-1034, which restricts to letters, numbers, and hyphen, with the\nfirst character a letter, the last a letter or a number, and a 63\ncharacter maximum."
        description:
          type: string
          description: Pipeline description.
        recipe:
          type: object
          description: Recipe describes the components of a Pipeline and how they are connected.
        createTime:
          type: string
          description: Pipeline creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Pipeline update time.
          format: date-time
          readOnly: true
        deleteTime:
          type: string
          description: Pipeline delete time.
          format: date-time
          readOnly: true
        sharing:
          allOf:
            - $ref: '#/components/schemas/Sharing'
          description: Pipeline sharing information.
        metadata:
          type: object
          description: Metadata holds console-related data such as the pipeline builder layout.
        ownerName:
          type: string
          description: Owner Name.
          readOnly: true
        releases:
          type: array
          items:
            $ref: '#/components/schemas/PipelineRelease'
          description: Releases holds the history of pipeline versions.
          readOnly: true
        readme:
          type: string
          description: README holds the pipeline documentation.
        permission:
          allOf:
            - $ref: '#/components/schemas/pipeline.v1beta.Permission'
          description: Permission defines how a pipeline can be used.
          readOnly: true
        visibility:
          allOf:
            - $ref: '#/components/schemas/Pipeline.Visibility'
          description: Pipeline visibility.
          readOnly: true
        owner:
          allOf:
            - $ref: '#/components/schemas/Owner'
          description: Pipeline owner.
          readOnly: true
        dataSpecification:
          allOf:
            - $ref: '#/components/schemas/DataSpecification'
          description: Data specifications.
          readOnly: true
        tags:
          type: array
          items:
            type: string
          description: Tags.
        stats:
          allOf:
            - $ref: '#/components/schemas/Pipeline.Stats'
          description: Statistic data.
          readOnly: true
        rawRecipe:
          type: string
          description: "Recipe in YAML format describes the components of a pipeline and how they\nare connected."
        sourceUrl:
          type: string
          description: A link to the source code of the pipeline (e.g. to a GitHub repository).
        documentationUrl:
          type: string
          description: A link to any extra information.
        license:
          type: string
          description: License under which the pipeline is distributed.
        profileImage:
          type: string
          description: Pipeline profile image in base64 format.
        endpoints:
          allOf:
            - $ref: '#/components/schemas/Endpoints'
          description: Pipeline endpoints.
          readOnly: true
      description: "A Pipeline is an end-to-end workflow that automates a sequence of components\nto process data.\n\nFor more information, see [Pipeline](https://instill-ai.dev/docs/pipeline/introduction) in\nthe official documentation."
    Pipeline.Stats:
      title: Statistic data
      type: object
      properties:
        numberOfRuns:
          type: integer
          description: Number of pipeline runs.
          format: int32
          readOnly: true
        lastRunTime:
          type: string
          description: Last run time.
          format: date-time
          readOnly: true
        numberOfClones:
          type: integer
          description: Number of times this pipeline has been cloned.
          format: int32
          readOnly: true
    Pipeline.View:
      enum:
        - VIEW_BASIC
        - VIEW_FULL
        - VIEW_RECIPE
      type: string
      description: "View defines how a Pipeline is presented.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation.\n - VIEW_RECIPE: Contains the recipe of the resource."
    Pipeline.Visibility:
      enum:
        - VISIBILITY_PRIVATE
        - VISIBILITY_PUBLIC
      type: string
      description: "Visibility defines who can access the pipeline.\n\n - VISIBILITY_PRIVATE: Only the user can see the pipeline.\n - VISIBILITY_PUBLIC: Other users can see the pipeline."
    PipelineRelease:
      type: object
      properties:
        name:
          type: string
          description: "The name of the release, defined by its parent and ID.\n- Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}/releases/{release.id}`."
          readOnly: true
        uid:
          type: string
          description: Release UUID.
          readOnly: true
        id:
          type: string
          description: "Release resource ID (used in `name` as the last segment). It must be a\nsematic version vX.Y.Z."
        description:
          type: string
          description: Release description.
        recipe:
          type: object
          description: Recipe of the versioned pipeline.
          readOnly: true
        createTime:
          type: string
          description: Pipeline creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Pipeline update time.
          format: date-time
          readOnly: true
        deleteTime:
          type: string
          description: Pipeline deletion time.
          format: date-time
          readOnly: true
        alias:
          type: string
          description: Alias.
          readOnly: true
        metadata:
          type: object
          description: "Key-value object with console-related data such as the pipeline builder\nlayout."
        readme:
          type: string
          description: README.
        dataSpecification:
          allOf:
            - $ref: '#/components/schemas/DataSpecification'
          description: Data specifications.
          readOnly: true
        rawRecipe:
          type: string
          description: "Recipe in YAML format describes the components of a pipeline and how they\nare connected."
        endpoints:
          allOf:
            - $ref: '#/components/schemas/Endpoints'
          description: Pipeline endpoints.
          readOnly: true
      description: "Pipeline releases contain the version control information of a pipeline.\nThis allows users to track changes in the pipeline over time."
    PipelineRun:
      type: object
      properties:
        pipelineRunUid:
          type: string
          description: Unique identifier for each run.
          readOnly: true
        pipelineVersion:
          type: string
          description: Pipeline version used in the run.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/RunStatus'
          description: Current status of the run.
          readOnly: true
        source:
          allOf:
            - $ref: '#/components/schemas/RunSource'
          description: Origin of the run.
          readOnly: true
        totalDuration:
          type: integer
          description: Time taken to complete the run in milliseconds.
          format: int32
          readOnly: true
        runnerId:
          type: string
          description: "Runner ID. The authenticated user that triggered the run. If current\nviewing requester does not have enough permission, it will return null."
          readOnly: true
        inputs:
          type: array
          items:
            type: object
          description: Pipeline input parameters.
          readOnly: true
        outputs:
          type: array
          items:
            type: object
          description: Pipeline inference outputs.
          readOnly: true
        recipeSnapshot:
          type: object
          description: Snapshot of the pipeline recipe used for this run.
          readOnly: true
        startTime:
          type: string
          description: Time when the run started execution.
          format: date-time
          readOnly: true
        completeTime:
          type: string
          description: Time when the run completed.
          format: date-time
          readOnly: true
        error:
          type: string
          description: Error message if the run failed.
          readOnly: true
        creditAmount:
          type: number
          description: Credits used of internal accounting metric.
          format: float
          readOnly: true
        dataSpecification:
          allOf:
            - $ref: '#/components/schemas/DataSpecification'
          description: Data specifications.
          readOnly: true
        pipelineId:
          title: The ID of the pipeline
          type: string
          readOnly: true
        requesterId:
          type: string
          description: "Requester ID. The namespace used to trigger the run. This field might be\nempty if the pipeline run belongs to a deleted namespace."
          readOnly: true
        pipelineNamespaceId:
          type: string
          description: ID of the namespace that owns the pipeline.
          readOnly: true
        blobDataExpirationTime:
          type: string
          description: "Expiration time for the blob data associated with the pipeline run (e.g.\ninput data, recipe). When the run is accessed after the expiration, that\ninformation will be empty, but this field will allow the user identify\nthat the data isn't there because it has expired."
          format: date-time
          readOnly: true
      description: PipelineRun represents a single execution of a pipeline.
    PipelineTriggerChartRecord:
      type: object
      properties:
        pipelineId:
          type: string
          description: This field will be present present when the information is grouped by pipeline.
          readOnly: true
        timeBuckets:
          type: array
          items:
            type: string
            format: date-time
          description: Time buckets.
          readOnly: true
        triggerCounts:
          type: array
          items:
            type: integer
            format: int32
          description: Aggregated trigger count in each time bucket.
          readOnly: true
        requesterId:
          type: string
          description: The ID of the namespace that requested the pipeline triggers.
          readOnly: true
      description: "PipelineTriggerChartRecord represents a timeline of pipeline triggers. It\ncontains a collection of (timestamp, count) pairs that represent the total\npipeline triggers in a given time bucket.\npipeline ID and time frame."
    ProcessCatalogFilesRequest:
      title: Process Catalog File Request
      required:
        - fileUids
      type: object
      properties:
        fileUids:
          type: array
          items:
            type: string
          description: The file uid.
    ProcessCatalogFilesResponse:
      title: Process Catalog File Response
      required:
        - files
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: The file uid.
    QuestionAnsweringBody:
      title: QuestionAnsweringRequest
      type: object
      properties:
        question:
          title: question to be answered
          type: string
        topK:
          title: top k default to 5
          type: integer
          format: int32
    QuestionAnsweringResponse:
      title: QuestionAnsweringResponse
      type: object
      properties:
        answer:
          title: answer to the question
          type: string
        similarChunks:
          title: chunks
          type: array
          items:
            $ref: '#/components/schemas/SimilarityChunk'
    RecomputeCellBody:
      type: object
      description: RecomputeCellRequest represents a request to recompute a cell.
    RecomputeCellResponse:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The updated cell resource.
          readOnly: true
      description: RecomputeCellResponse contains the updated cell.
    RecomputeColumnResponse:
      type: object
      description: RecomputeColumnResponse is an empty response for recomputing a column.
    Region:
      type: object
      properties:
        regionName:
          title: Concatenate name of provider and region
          type: string
        hardware:
          title: Hardware describes the available hardware types in this region
          type: array
          items:
            $ref: '#/components/schemas/Hardware'
      description: "Region describes the supported cloud provider and regions, with\ntheir supported GPU respectively."
    RenameNamespaceModelBody:
      title: RenameNamespaceModelRequest represents a request to rename a model
      required:
        - newModelId
      type: object
      properties:
        newModelId:
          type: string
          description: "The new resource ID. This will transform the resource name into\n`namespaces/{namespace.id}/models/{new_model_id}`."
    RenameNamespaceModelResponse:
      type: object
      properties:
        model:
          allOf:
            - $ref: '#/components/schemas/Model'
          description: The renamed model resource.
          readOnly: true
      description: RenameNamespaceModelResponse contains a renamed model.
    RenameNamespacePipelineBody:
      required:
        - newPipelineId
      type: object
      properties:
        newPipelineId:
          type: string
          description: "The new resource ID. This will transform the resource name into\n`namespaces/{namespace.id}/pipelines/{new_pipeline_id}`."
      description: "RenameNamespacePipelineRequest represents a request to rename the name of a\npipeline owned by a namespace."
    RenameNamespacePipelineResponse:
      type: object
      properties:
        pipeline:
          allOf:
            - $ref: '#/components/schemas/Pipeline'
          description: The renamed pipeline resource.
          readOnly: true
      description: RenameNamespacePipelineResponse contains a renamed pipeline.
    RepositoryTag:
      type: object
      properties:
        name:
          type: string
          description: "The name of the tag, defined by its parent repository and ID.\n- Format: `repositories/{repository.id}/tags/{tag.id}`."
        id:
          type: string
          description: The tag identifier.
        digest:
          type: string
          description: 'Unique identifier, computed from the manifest the tag refers to.'
        updateTime:
          type: string
          description: 'Tag update time, i.e. timestamp of the last push.'
          format: date-time
          readOnly: true
      description: "RepositoryTag contains information about the version of some content in a\nrepository."
    ResetCellBody:
      type: object
      description: ResetCellRequest represents a request to reset a cell.
    ResetCellResponse:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The updated cell resource.
          readOnly: true
      description: ResetCellResponse is an empty response for resetting a cell.
    Role:
      enum:
        - ROLE_VIEWER
        - ROLE_EXECUTOR
      type: string
      description: "Role describes the permissions a user has over a resource.\n\n - ROLE_VIEWER: Viewers can see the resource properties.\n - ROLE_EXECUTOR: Executors can execute the resource (e.g. trigger a pipeline)."
    Row:
      required:
        - cells
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the row.
          readOnly: true
        cells:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Cell'
          description: Map of column UID to their cell values.
        order:
          type: integer
          description: "The order of the row in the table, starting at 1. This determines the row's position\nwhen displaying or processing table data."
          format: int32
          readOnly: true
        createTime:
          type: string
          description: The timestamp when the row was created.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: The timestamp when the row was last updated.
          format: date-time
          readOnly: true
      description: Row represents a row in a table.
    RowDeletedEvent:
      type: object
      properties:
        rowUid:
          type: string
          description: The unique identifier of the row that was deleted.
          readOnly: true
      description: RowDeletedEvent represents an event for a row being deleted.
    RowInsertedEvent:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: "The row that was inserted.\nNote: Only the row metadata is returned, not the cell data."
          readOnly: true
        beforeRowUid:
          type: string
          description: The unique identifier of the row that was inserted before.
          readOnly: true
      description: RowInsertedEvent represents an event for a row being inserted.
    RowUpdatedEvent:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: "The row that was updated.\nNote: Only the row metadata is returned, not the cell data."
          readOnly: true
      description: RowUpdatedEvent represents an event for a row being updated.
    RowsMovedEvent:
      type: object
      properties:
        rowUids:
          type: array
          items:
            type: string
          description: The unique identifiers of the rows that were moved.
          readOnly: true
        beforeRowUid:
          type: string
          description: The unique identifier of the row that was moved before.
          readOnly: true
      description: RowsMovedEvent represents an event for multiple rows being moved.
    RunSource:
      enum:
        - RUN_SOURCE_CONSOLE
        - RUN_SOURCE_API
      type: string
      description: "RunSource defines the source of a pipeline or model run.\n\n - RUN_SOURCE_CONSOLE: Run from frontend UI.\n - RUN_SOURCE_API: Run from API or SDK."
    RunStatus:
      enum:
        - RUN_STATUS_PROCESSING
        - RUN_STATUS_COMPLETED
        - RUN_STATUS_FAILED
        - RUN_STATUS_QUEUED
      type: string
      description: "RunStatus defines the status of a pipeline or model run.\n\n - RUN_STATUS_PROCESSING: Run in progress.\n - RUN_STATUS_COMPLETED: Run succeeded.\n - RUN_STATUS_FAILED: Run failed.\n - RUN_STATUS_QUEUED: Run is waiting to be executed."
    SearchChunksResponse:
      title: Search chunks response
      type: object
      properties:
        chunks:
          title: repeated chunks
          type: array
          items:
            $ref: '#/components/schemas/.Chunk'
          readOnly: true
    SearchSourceFilesResponse:
      title: search source file response
      type: object
      properties:
        sourceFiles:
          title: source files
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
          readOnly: true
    Secret:
      type: object
      properties:
        name:
          type: string
          description: "The name of the secret, define by its ID.\n- Format: `secrets/{secret.id}`."
          readOnly: true
        uid:
          type: string
          description: Secret UUID.
          readOnly: true
        id:
          type: string
          description: "Secret resource ID (used in `name` as the last segment). This conforms\nto RFC-1034, which restricts to letters, numbers, and hyphen, with the\nfirst character a letter, the last a letter or a number, and a 63\ncharacter maximum."
        createTime:
          type: string
          description: Creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Update time.
          format: date-time
          readOnly: true
        value:
          type: string
          description: 'The value of the secret, which is input-only and will never be returned in API responses.'
        description:
          title: Description
          type: string
      description: API secrets allow users to make requests to the Instill AI API.
    Selection:
      required:
        - type
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/SelectionType'
          description: The selection of the column.
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
          description: The options for the selection.
      description: The selection settings of the column.
    SelectionType:
      enum:
        - SELECTION_TYPE_NONE
        - SELECTION_TYPE_SINGLE
      type: string
      description: "The type of the selection.\n\n - SELECTION_TYPE_NONE: No selection.\n - SELECTION_TYPE_SINGLE: The selection is a single value."
    ShareCode:
      type: object
      properties:
        user:
          type: string
          description: "Defines which users will be able to access the resource through the\ncode. This is a pattern that will be checked against user names.\n\nFor now, the only accepted value is `*/*`."
        code:
          type: string
          description: The public URL that allows users to access the resource.
        enabled:
          type: boolean
          description: Defines whether the sharing option via link is enabled.
        role:
          allOf:
            - $ref: '#/components/schemas/Role'
          description: Defines the role users will have over the resource.
      description: ShareCode describes a sharing configuration through a link.
    Sharing:
      type: object
      properties:
        users:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Sharing.User'
          description: "Defines sharing rules for a set of user resource names.\n\nEach key in this object should contain a pattern that can be matched\nagainst user names.\n\nEach value is a user sharing configuration.\n\n**NOTE**: For now, the only accepted key is `*/*`."
        shareCode:
          allOf:
            - $ref: '#/components/schemas/ShareCode'
          description: Defines the configuration to share a resource via link.
      description: "Sharing contains the information to share a resource with other users.\n\nFor more information, see [Share Pipelines](https://instill-ai.dev/docs/pipeline/share-pipeline)."
    Sharing.User:
      type: object
      properties:
        enabled:
          type: boolean
          description: Defines whether the sharing option with this user is enabled.
        role:
          allOf:
            - $ref: '#/components/schemas/Role'
          description: Defines the role the user will have over the resource.
      description: Describes the sharing configuration with a given user.
    SimilarityChunk:
      title: similarity chunks
      type: object
      properties:
        chunkUid:
          title: chunk uid
          type: string
          readOnly: true
        similarityScore:
          title: similarity score
          type: number
          format: float
          readOnly: true
        textContent:
          title: content
          type: string
          readOnly: true
        sourceFile:
          title: source file's name
          type: string
          readOnly: true
        chunkMetadata:
          title: chunk
          allOf:
            - $ref: '#/components/schemas/.Chunk'
          readOnly: true
    SimilarityChunksSearchBody:
      title: Similar chunk search request
      required:
        - textPrompt
      type: object
      properties:
        textPrompt:
          title: text prompt
          type: string
        topK:
          title: top k
          type: integer
          format: int64
        fileName:
          title: file name
          type: string
        contentType:
          title: content type
          allOf:
            - $ref: '#/components/schemas/ContentType'
        fileMediaType:
          title: file type
          allOf:
            - $ref: '#/components/schemas/FileMediaType'
    SimilarityChunksSearchResponse:
      title: Similar chunk search response
      type: object
      properties:
        similarChunks:
          title: chunks
          type: array
          items:
            $ref: '#/components/schemas/SimilarityChunk'
          readOnly: true
    Sort:
      enum:
        - SORT_ASCENDING
        - SORT_DESCENDING
      type: string
      description: "The sort of the column.\n\n - SORT_ASCENDING: The sort is ascending.\n - SORT_DESCENDING: The sort is descending."
    SourceFile:
      type: object
      properties:
        originalFileUid:
          title: original file unique identifier
          type: string
          readOnly: true
        content:
          title: content
          type: string
          readOnly: true
        createTime:
          title: creation time of the source file
          type: string
          format: date-time
          readOnly: true
        updateTime:
          title: update time of the source file
          type: string
          format: date-time
          readOnly: true
        originalFileName:
          title: original file name
          type: string
          readOnly: true
      description: The SourceFile message represents a source file in the artifact system.
    Spec:
      type: object
      properties:
        componentSpecification:
          type: object
          description: Component specification.
          readOnly: true
        dataSpecifications:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DataSpecification'
          description: "Data specifications.\nThe key represents the task, and the value is the corresponding data_specification.\nNote: This field will be renamed to task_specifications in the future."
          readOnly: true
        eventSpecifications:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EventSpecification'
          description: "Event specifications.\nThe key represents the event, and the value is the corresponding event_specification."
          readOnly: true
      description: Spec represents a specification data model.
    StringCell:
      type: object
      properties:
        userInput:
          type: string
          description: The value of the cell that directly set by the user.
        computedValue:
          type: string
          description: The value of the cell that was computed by the automatic computation.
      description: StringCell represents a cell with a string value.
    StripeSubscriptionDetail:
      type: object
      properties:
        productName:
          type: string
          description: Product name associated with the subscription in Stripe.
          readOnly: true
        id:
          type: string
          description: Unique identifier for the subscription.
          readOnly: true
        itemId:
          type: string
          description: Identifier for the specific item within the subscription.
          readOnly: true
        price:
          type: number
          description: Price of the subscription.
          format: float
          readOnly: true
        canceledAt:
          type: integer
          description: 'Optional timestamp indicating when the subscription was canceled, if applicable.'
          format: int32
          readOnly: true
        trialEnd:
          type: integer
          description: 'Optional timestamp indicating when the trial ended, if applicable.'
          format: int32
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/StripeSubscriptionDetail.Status'
          description: Status of the subscription.
          readOnly: true
        description:
          type: string
          description: Description of the subscription.
          readOnly: true
      description: StripeSubscriptionDetail describes the details of a subscription in Stripe.
    StripeSubscriptionDetail.Status:
      enum:
        - STATUS_INCOMPLETE
        - STATUS_INCOMPLETE_EXPIRED
        - STATUS_TRIALING
        - STATUS_ACTIVE
        - STATUS_PAST_DUE
        - STATUS_CANCELED
        - STATUS_UNPAID
        - STATUS_PAUSED
      type: string
      description: "Enumerates the status types for the user's subscription.\n\n - STATUS_INCOMPLETE: Incomplete.\n - STATUS_INCOMPLETE_EXPIRED: Incomplete Expired.\n - STATUS_TRIALING: Trialing.\n - STATUS_ACTIVE: Active.\n - STATUS_PAST_DUE: Past due.\n - STATUS_CANCELED: Canceled.\n - STATUS_UNPAID: Unpaid.\n - STATUS_PAUSED: Paused."
    SubtractCreditAdminResponse:
      type: object
      properties:
        amount:
          type: number
          description: The remaining credit.
          format: float
      description: "SubtractCreditResponse contains the remaining credit of an account after the\nsubtraction."
    Table:
      required:
        - agentConfig
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the table.
          readOnly: true
        title:
          type: string
          description: "The title of the table.\nIf the table is in draft mode, the title is optional.\nIf the table is not in draft mode, the title is required."
        description:
          type: string
          description: A description of the table.
        metadata:
          type: object
          description: Additional metadata associated with the table.
        createTime:
          type: string
          description: The timestamp when the table was created.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: The timestamp when the table was last updated.
          format: date-time
          readOnly: true
        agentConfig:
          allOf:
            - $ref: '#/components/schemas/Table.AgentConfig'
          description: The configuration for the agent.
        draftMode:
          type: boolean
          description: Whether to enable draft mode for the table.
        permission:
          allOf:
            - $ref: '#/components/schemas/Table.Permission'
          description: Permission defines how a table can be used.
          readOnly: true
        catalogId:
          type: string
          description: The ID of the catalog that this table is bound to.
          readOnly: true
      description: Table represents a table resource.
    Table.AgentConfig:
      required:
        - enableTransparency
      type: object
      properties:
        enableTransparency:
          type: boolean
          description: Whether to enable transparency for the table.
      description: The configuration for the agent.
    Table.Permission:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Defines whether the table can be modified.
      description: Permission defines how a table can be used.
    TableDeletedEvent:
      type: object
      description: TableDeletedEvent represents an event for a table being deleted.
    TableEvent:
      type: object
      properties:
        event:
          type: string
          description: "The event type.\nIn text/event-stream format, this maps to the `event` field."
          readOnly: true
        id:
          type: string
          description: "The ID of the event.\nIn text/event-stream format, this maps to the `id` field."
          readOnly: true
        tableUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/TableUpdatedEvent'
          description: The table that was updated.
        tableDeletedEvent:
          allOf:
            - $ref: '#/components/schemas/TableDeletedEvent'
          description: The table that was deleted.
        columnDefinitionsUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/ColumnDefinitionsUpdatedEvent'
          description: The column definitions that were updated.
        rowInsertedEvent:
          allOf:
            - $ref: '#/components/schemas/RowInsertedEvent'
          description: The row that was inserted.
        rowUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/RowUpdatedEvent'
          description: The row that was updated.
        rowDeletedEvent:
          allOf:
            - $ref: '#/components/schemas/RowDeletedEvent'
          description: The row that was deleted.
        rowsMovedEvent:
          allOf:
            - $ref: '#/components/schemas/RowsMovedEvent'
          description: The rows that were moved.
        cellUpdatedEvent:
          allOf:
            - $ref: '#/components/schemas/CellUpdatedEvent'
          description: The cell that was updated.
      description: TableEvent represents an event for a table.
    TableUpdatedEvent:
      type: object
      properties:
        table:
          allOf:
            - $ref: '#/components/schemas/Table'
          description: The table that was updated.
          readOnly: true
      description: TableUpdatedEvent represents an event for a table being updated.
    AITask:
      enum:
        - TASK_CLASSIFICATION
        - TASK_DETECTION
        - TASK_KEYPOINT
        - TASK_OCR
        - TASK_INSTANCE_SEGMENTATION
        - TASK_SEMANTIC_SEGMENTATION
        - TASK_TEXT_TO_IMAGE
        - TASK_IMAGE_TO_IMAGE
        - TASK_EMBEDDING
        - TASK_SPEECH_RECOGNITION
        - TASK_CHAT
        - TASK_COMPLETION
        - TASK_CUSTOM
      type: string
      description: "Task enumerates the AI task that a model is designed to solve.\n\n - TASK_CLASSIFICATION: Image Classification - classify images into predefined categories.\n - TASK_DETECTION: Object Detection - detect and localize multiple objects in images.\n - TASK_KEYPOINT: Keypoint Detection - detect and localize multiple keypoints of objects in images.\n - TASK_OCR: OCR (Optical Character Recognition) - detect and recognize text in images.\n - TASK_INSTANCE_SEGMENTATION: Instance Segmentation - detect, localize and delineate multiple objects in images.\n - TASK_SEMANTIC_SEGMENTATION: Semantic Segmentation - classify image pixels into predefined categories.\n - TASK_TEXT_TO_IMAGE: Text to Image - generate images from input text prompts.\n - TASK_IMAGE_TO_IMAGE: Image to Image - generate an image from another image.\n - TASK_EMBEDDING: Embedding - generate an embedding (a representation as coordinates) from a multimodal input.\n - TASK_SPEECH_RECOGNITION: Speech Recognition - transcribe the words in an audio input.\n - TASK_CHAT: Conversational Text Generation - generate text as responses to a dialog input.\n - TASK_COMPLETION: Completion Text Generation - generate text following the input prompt.\n - TASK_CUSTOM: Custom - custom task type for free form input/output."
    TestNamespaceConnectionResponse:
      type: object
      description: TestNamespaceConnectionResponse is an empty response.
    Text:
      title: text message
      type: object
      properties:
        pipelineIds:
          title: pipelines
          type: array
          items:
            type: string
        transformedContent:
          title: transformed content
          type: string
        transformedContentChunkNum:
          title: transformed content chunk number
          type: integer
          format: int32
        transformedContentTokenNum:
          title: transformed content token number
          type: integer
          format: int32
        transformedContentUpdateTime:
          title: transformed content update time
          type: string
          format: date-time
    Trace:
      type: object
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/Trace.Status'
          description: Statuses contains an execution status per input.
          readOnly: true
        inputs:
          type: array
          items:
            type: object
          description: Component inputs.
          readOnly: true
        outputs:
          type: array
          items:
            type: object
          description: Component outputs.
          readOnly: true
        error:
          type: object
          description: Error details.
          readOnly: true
        computeTimeInSeconds:
          type: number
          description: Computation time in seconds.
          format: float
          readOnly: true
      description: Trace contains the execution details of a component.
    Trace.Status:
      enum:
        - STATUS_COMPLETED
        - STATUS_SKIPPED
        - STATUS_ERROR
      type: string
      description: "Status holds the the component execution outcome.\n\n - STATUS_COMPLETED: Successfully completed.\n - STATUS_SKIPPED: Skipped.\n - STATUS_ERROR: Aborted with error."
    Transparency:
      type: object
      properties:
        text:
          type: string
          description: The text of the transparency.
          readOnly: true
      description: The transparency of the cell.
    TriggerAsyncNamespaceLatestModelBody:
      required:
        - taskInputs
      type: object
      properties:
        taskInputs:
          type: array
          items:
            type: object
          description: Model inference inputs.
      description: "TriggerAsyncNamespaceLatestModelRequest represents a request to trigger a\nmodel inference asynchronously with the latest uploaded version."
    TriggerAsyncNamespaceLatestModelResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: Long-running operation information.
          readOnly: true
      description: "TriggerAsyncNamespaceLatestModelResponse contains the information to access\nthe status of an asynchronous model inference."
    TriggerAsyncNamespaceModelBody:
      required:
        - taskInputs
      type: object
      properties:
        taskInputs:
          type: array
          items:
            type: object
          description: Model inference inputs.
      description: "TriggerAsyncNamespaceModelRequest represents a request to trigger a model\ninference asynchronously."
    TriggerAsyncNamespaceModelResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: Long-running operation information.
          readOnly: true
      description: "TriggerAsyncNamespaceModelResponse contains the information to access the\nstatus of an asynchronous model inference."
    TriggerAsyncNamespacePipelineBody:
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
          description: 'Pipeline input parameters, it will be deprecated soon.'
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/TriggerData'
      description: "TriggerNamespacePipelineRequest represents a request to trigger a user-owned\npipeline synchronously."
    TriggerAsyncNamespacePipelineReleaseBody:
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
          description: 'Pipeline input parameters, it will be deprecated soon.'
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/TriggerData'
      description: "TriggerNamespacePipelineReleaseRequest represents a request to trigger a pinned\nrelease of a user-owned pipeline asynchronously."
    TriggerAsyncNamespacePipelineReleaseResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: Long-running operation information.
          readOnly: true
      description: "TriggerAsyncNamespacePipelineReleaseResponse contains the information to access\nthe status of an asynchronous pipeline execution."
    TriggerAsyncNamespacePipelineResponse:
      type: object
      properties:
        operation:
          allOf:
            - $ref: '#/components/schemas/longrunning.Operation'
          description: Long-running operation information.
          readOnly: true
      description: "TriggerAsyncNamespacePipelineResponse contains the information to access the\nstatus of an asynchronous pipeline execution."
    TriggerData:
      type: object
      properties:
        variable:
          type: object
          description: The values of the pipeline variables.
        secret:
          type: object
          additionalProperties:
            type: string
          description: "A collection of secrets. By default, if a pipeline references any secret\n(`${secret.<id>}`), its value is read from the namespace's secrets.\nThis object provides a way to override these secret values: if one of its\nkeys matches the ID of a reference secret, its value will be read from\nhere instead of from the namespace secret collection."
        connectionReferences:
          type: object
          additionalProperties:
            type: string
          description: "A collection of connection references. By default, connection references\n(`${connection.<id>}`) in a pipeline will be resolved by fetching the\nvalue from the requester's connections. Connections contain sensitive data\nand can't be shared across namespaces, so this means that, in order to\nsuccessfully run a pipeline owned by another namespace, the requester will\nneed to have a connection with the same ID.\nThis object provides a way to override the connection references with\nconnections that the requester owns. Each element in the object maps a\nconnection ID present in the pipeline (key) to the ID of a connection\nowned by the requester (value).\nNote that, since only references are accepted (this object shouldn't\ncontain connection **values**), the reference syntax shouldn't be used\nhere."
      description: TriggerData contains the input data for a pipeline run.
    TriggerMetadata:
      type: object
      properties:
        traces:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Trace'
          description: "Each key in the `traces` object is a component ID. The value is a Trace\nobject containing the execution details."
          readOnly: true
      description: TriggerMetadata contains the traces of the pipeline inference.
    TriggerNamespaceLatestModelBinaryFileUploadResponse:
      required:
        - task
      type: object
      properties:
        task:
          allOf:
            - $ref: '#/components/schemas/AITask'
          description: Task type.
        taskOutputs:
          type: array
          items:
            type: object
          description: "Deleteted field.\nModel inference outputs."
          readOnly: true
      description: "TriggerNamespaceLatestModelBinaryFileUploadResponse contains the model\ninference results."
    TriggerNamespaceLatestModelBody:
      required:
        - taskInputs
      type: object
      properties:
        taskInputs:
          type: array
          items:
            type: object
          description: Model inference inputs.
      description: "TriggerNamespaceLatestModelRequest represents a request to trigger a model\ninference with the latest uploaded version."
    TriggerNamespaceLatestModelResponse:
      type: object
      properties:
        task:
          allOf:
            - $ref: '#/components/schemas/AITask'
          description: Task type.
          readOnly: true
        taskOutputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
      description: TriggerNamespaceLatestModelResponse contains the model inference results.
    TriggerNamespaceModelBinaryFileUploadResponse:
      required:
        - task
      type: object
      properties:
        task:
          allOf:
            - $ref: '#/components/schemas/AITask'
          description: Task type.
        taskOutputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
      description: "TriggerNamespaceModelBinaryFileUploadResponse contains the model inference\nresults."
    TriggerNamespaceModelBody:
      required:
        - taskInputs
      type: object
      properties:
        taskInputs:
          type: array
          items:
            type: object
          description: Model inference inputs.
      description: "TriggerNamespaceModelRequest represents a request to trigger a model\ninference."
    TriggerNamespaceModelResponse:
      type: object
      properties:
        task:
          allOf:
            - $ref: '#/components/schemas/AITask'
          description: Task type.
          readOnly: true
        taskOutputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
      description: TriggerNamespaceModelResponse contains the model inference results.
    TriggerNamespacePipelineBody:
      required:
        - inputs
        - data
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
          description: 'Pipeline input parameters, it will be deprecated soon.'
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/TriggerData'
      description: "TriggerNamespacePipelineRequest represents a request to trigger a user-owned\npipeline synchronously."
    TriggerNamespacePipelineReleaseBody:
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
          description: 'Pipeline input parameters, it will be deprecated soon.'
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/TriggerData'
      description: "TriggerNamespacePipelineReleaseRequest represents a request to trigger a pinned\nrelease of a user-owned pipeline."
    TriggerNamespacePipelineReleaseResponse:
      type: object
      properties:
        outputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/TriggerMetadata'
          description: Traces of the pipeline inference.
          readOnly: true
      description: "TriggerNamespacePipelineReleaseResponse contains the pipeline execution results,\ni.e., the multiple model inference outputs."
    TriggerNamespacePipelineResponse:
      type: object
      properties:
        outputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/TriggerMetadata'
          description: Traces of the pipeline inference.
          readOnly: true
      description: "TriggerNamespacePipelineResponse contains the pipeline execution results, i.e.,\nthe multiple model inference outputs."
    TriggerNamespacePipelineWithStreamBody:
      type: object
      properties:
        inputs:
          type: array
          items:
            type: object
          description: 'Pipeline input parameters, it will be deprecated soon.'
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/TriggerData'
      description: "TriggerNamespacePipelineWithStreamRequest represents a request to trigger a user-owned\npipeline synchronously and streams back the results."
    TriggerNamespacePipelineWithStreamResponse:
      type: object
      properties:
        outputs:
          type: array
          items:
            type: object
          description: Model inference outputs.
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/TriggerMetadata'
          description: Traces of the pipeline inference.
          readOnly: true
      description: "TriggerNamespacePipelineWithStreamResponse contains the pipeline execution results, i.e.,\nthe multiple model inference outputs."
    UnbindChatTableBody:
      required:
        - tableUid
      type: object
      properties:
        tableUid:
          type: string
          description: The UID of the table to unbind from the chat.
      description: UnbindChatTableRequest represents a request to unbind a table from a chat.
    UnbindChatTableResponse:
      type: object
      description: UnbindChatTableResponse is an empty response for unbinding a table from a chat.
    UndeployNamespaceModelAdminResponse:
      title: "UndeployNamespaceModelAdminResponse represents a response for a undeployed\nmodel"
      type: object
    UndeployOrganizationModelAdminResponse:
      title: "UndeployOrganizationModelAdminResponse represents a response for a undeployed\nmodel"
      type: object
    UndeployUserModelAdminResponse:
      title: UndeployUserModelAdminResponse represents a response for a undeployed model
      type: object
    UnlockCellBody:
      type: object
      description: UnlockCellRequest represents a request to unlock a cell.
    UnlockCellResponse:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The updated cell resource.
          readOnly: true
      description: UnlockCellResponse is an empty response for unlocking a cell.
    UpdateCatalogBody:
      type: object
      properties:
        description:
          type: string
          description: The catalog description.
        tags:
          type: array
          items:
            type: string
          description: The catalog tags.
      description: UpdateCatalogRequest represents a request to update a catalog.
    UpdateCatalogResponse:
      type: object
      properties:
        catalog:
          allOf:
            - $ref: '#/components/schemas/Catalog'
          description: The updated catalog.
      description: UpdateCatalogResponse represents a response for updating a catalog.
    UpdateCellBody:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The new cell data.
      description: UpdateCellRequest represents a request to update a cell.
    UpdateCellResponse:
      type: object
      properties:
        cell:
          allOf:
            - $ref: '#/components/schemas/Cell'
          description: The updated cell resource.
          readOnly: true
      description: UpdateCellResponse contains the updated cell.
    UpdateChatBody:
      title: UpdateChatRequest is used to update a chat
      type: object
      properties:
        chatDisplayName:
          title: chat display name
          type: string
        agentConfig:
          title: ai agent settings
          allOf:
            - $ref: '#/components/schemas/.AgentConfig'
    UpdateChatResponse:
      title: UpdateChatResponse returns the updated chat
      type: object
      properties:
        chat:
          title: chat
          allOf:
            - $ref: '#/components/schemas/Chat'
          readOnly: true
    UpdateChunkBody:
      title: Create chunk response
      required:
        - retrievable
      type: object
      properties:
        retrievable:
          title: whether the chunk is retrievable
          type: boolean
    UpdateChunkResponse:
      title: update chunk response
      type: object
      properties:
        chunk:
          title: chunk
          allOf:
            - $ref: '#/components/schemas/.Chunk'
          readOnly: true
    UpdateColumnDefinitionsResponse:
      type: object
      properties:
        columnDefinitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColumnDefinition'
          description: Map of column UID to the updated definitions.
          readOnly: true
      description: UpdateColumnDefinitionsResponse contains the updated column definitions.
    UpdateFolderBody:
      required:
        - updateMask
      type: object
      properties:
        folder:
          allOf:
            - $ref: '#/components/schemas/Folder'
          description: The folder fields that will replace the existing ones.
        updateMask:
          type: string
          description: The update mask specifies the subset of fields that should be modified.
      description: UpdateFolderRequest represents a request to update a folder.
    UpdateFolderResponse:
      type: object
      properties:
        folder:
          allOf:
            - $ref: '#/components/schemas/Folder'
          description: The updated folder resource.
          readOnly: true
      description: UpdateFolderResponse contains the updated folder.
    UpdateNamespaceConnectionResponse:
      type: object
      properties:
        connection:
          allOf:
            - $ref: '#/components/schemas/Connection'
          description: The created connection.
          readOnly: true
      description: UpdateNamespaceConnectionResponse contains the updated connection.
    UpdateNamespaceModelResponse:
      type: object
      properties:
        model:
          allOf:
            - $ref: '#/components/schemas/Model'
          description: The updated model resource.
          readOnly: true
      description: UpdateNamespaceModelResponse contains the updated model.
    UpdateNamespacePipelineReleaseResponse:
      type: object
      properties:
        release:
          allOf:
            - $ref: '#/components/schemas/PipelineRelease'
          description: The updated pipeline release resource.
          readOnly: true
      description: UpdateNamespacePipelineReleaseResponse contains the updated pipeline release.
    UpdateNamespacePipelineResponse:
      type: object
      properties:
        pipeline:
          allOf:
            - $ref: '#/components/schemas/Pipeline'
          description: The updated pipeline resource.
          readOnly: true
      description: UpdateNamespacePipelineResponse contains the updated pipeline.
    UpdateNamespaceSecretResponse:
      type: object
      properties:
        secret:
          allOf:
            - $ref: '#/components/schemas/Secret'
          description: The updated secret resource.
      description: UpdateNamespaceSecretResponse contains the updated secret.
    UpdateObjectResponse:
      title: UpdateObjectResponse
      type: object
      properties:
        object:
          title: object
          allOf:
            - $ref: '#/components/schemas/AIObject'
    UpdateOrganizationMembershipResponse:
      type: object
      properties:
        membership:
          allOf:
            - $ref: '#/components/schemas/OrganizationMembership'
          description: The updated membership resource.
          readOnly: true
      description: UpdateOrganizationMembershipResponse contains the updated membership.
    UpdateOrganizationResponse:
      type: object
      properties:
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: The organization resource.
          readOnly: true
      description: UpdateOrganizationResponse contains the updated organization.
    UpdateRowBody:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: The new row data.
      description: UpdateRowRequest represents a request to update a row.
    UpdateRowResponse:
      type: object
      properties:
        row:
          allOf:
            - $ref: '#/components/schemas/Row'
          description: The updated row resource.
          readOnly: true
      description: UpdateRowResponse contains the updated row.
    UpdateRowsBody:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'
          description: The rows to update.
      description: UpdateRowsRequest represents a request to update multiple rows.
    UpdateRowsResponse:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'
          description: The updated row resources.
          readOnly: true
      description: UpdateRowsResponse contains the updated rows.
    UpdateTableResponse:
      type: object
      properties:
        table:
          allOf:
            - $ref: '#/components/schemas/Table'
          description: The updated table resource.
          readOnly: true
      description: UpdateTableResponse contains the updated table.
    UpdateUserMembershipResponse:
      type: object
      properties:
        membership:
          allOf:
            - $ref: '#/components/schemas/UserMembership'
          description: The updated membership resource.
          readOnly: true
      description: UpdateUserMembershipResponse contains the updated membership.
    UploadCatalogFileResponse:
      title: upload file response
      required:
        - file
      type: object
      properties:
        file:
          title: file
          allOf:
            - $ref: '#/components/schemas/File'
    UserDefinedResponse:
      type: object
      properties:
        greeting:
          type: string
        numX2:
          type: string
          format: int64
    UserDefinedResponse2:
      type: object
      properties:
        greeting:
          type: string
    UserMembership:
      required:
        - state
      type: object
      properties:
        name:
          type: string
          description: "The resource name of the membership, which allows its access by user and\norganization ID.\n- Format: `users/{user.id}/memberships/{organization.id}`."
          readOnly: true
        role:
          type: string
          description: Role of the user in the organization.
          readOnly: true
        state:
          allOf:
            - $ref: '#/components/schemas/MembershipState'
          description: State of the membership.
        user:
          allOf:
            - $ref: '#/components/schemas/.User'
          description: User information.
          readOnly: true
        organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
          description: Organization information.
          readOnly: true
      description: "A user membership defines the relationship between a user and an\norganization they belong to."
    UserProfile:
      type: object
      properties:
        displayName:
          type: string
          description: Display name.
        bio:
          type: string
          description: Biography.
        avatar:
          type: string
          description: Avatar in base64 format.
        publicEmail:
          type: string
          description: Public email.
        companyName:
          type: string
          description: Company name.
        socialProfileLinks:
          type: object
          additionalProperties:
            type: string
          description: "Social profile links list the links to the user's social profiles.\nThe key represents the provider, and the value is the corresponding URL."
      description: UserProfile describes the public data of a user.
    UserSubscription:
      type: object
      properties:
        plan:
          allOf:
            - $ref: '#/components/schemas/UserSubscription.Plan'
          description: Plan identifier.
          readOnly: true
        detail:
          allOf:
            - $ref: '#/components/schemas/StripeSubscriptionDetail'
          description: Details of the associated Stripe subscription.
          readOnly: true
      description: 'UserSubscription details describe the plan (i.e., features) a user has access to.'
    UserSubscription.Plan:
      enum:
        - PLAN_FREE
        - PLAN_STARTER
      type: string
      description: "Enumerates the plan types for the user subscription.\n\n - PLAN_FREE: Free plan.\n - PLAN_STARTER: Starter plan."
    ValidateNamespacePipelineBody:
      type: object
      description: "ValidateNamespacePipelineRequest represents a request to validate a pipeline\nowned by a user."
    ValidateNamespacePipelineResponse:
      type: object
      properties:
        success:
          title: Success
          type: boolean
          readOnly: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrPipelineValidation'
          description: The validated pipeline resource.
          readOnly: true
      description: ValidateNamespacePipelineResponse contains a validated pipeline.
    ValidateTokenResponse:
      type: object
      properties:
        userUid:
          type: string
          description: 'If token is valid, UUID of the user that owns it.'
          readOnly: true
      description: ValidateTokenResponse contains the validation of a token.
    WatchNamespaceLatestModelResponse:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/.State'
          description: State.
          readOnly: true
        message:
          title: Detail description of the state
          type: string
          readOnly: true
      description: "WatchNamespaceLatestModelResponse contains the state of the latest model\nversion."
    WatchNamespaceModelResponse:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/.State'
          description: State.
          readOnly: true
        message:
          title: Detail description of the state
          type: string
          readOnly: true
      description: WatchNamespaceModelResponse contains the state of a model.
    WebhookEndpoint:
      type: object
      properties:
        url:
          type: string
          description: Webhook URL.
          readOnly: true
        description:
          type: string
          description: Description.
          readOnly: true
      description: WebhookEndpoint describe a webhook endpoint.
    agent.v1alpha.Message:
      title: Message represents a single message in a conversation
      required:
        - content
        - role
        - type
      type: object
      properties:
        uid:
          title: message uid
          type: string
          readOnly: true
        chatUid:
          title: chat uid
          type: string
          readOnly: true
        content:
          title: message content
          type: string
        role:
          title: 'message role e.g., "user" or "assistant" or "agent"'
          type: string
        type:
          title: message type
          allOf:
            - $ref: '#/components/schemas/MessageType'
        createTime:
          title: creation time of the message
          type: string
          format: date-time
          readOnly: true
        updateTime:
          title: update time of the message
          type: string
          format: date-time
          readOnly: true
        msgSenderUid:
          title: message sender uid(only for user messages)
          type: string
          readOnly: true
        citations:
          title: citations (only for agent messages)
          type: array
          items:
            $ref: '#/components/schemas/Citation'
          readOnly: true
        context:
          title: context for the message
          allOf:
            - $ref: '#/components/schemas/ChatContext'
          readOnly: true
        attachments:
          title: attachments for the message
          allOf:
            - $ref: '#/components/schemas/ChatAttachments'
          readOnly: true
        enableWebSearch:
          title: enable web search (only for user messages)
          type: boolean
          readOnly: true
        internal:
          type: boolean
          description: 'internal flag for the message, if true, the message is the intermediate message happened in the LLM flow.'
          readOnly: true
        rawMessage:
          title: raw message for the message
          type: object
          readOnly: true
    longrunning.Operation:
      type: object
      properties:
        name:
          type: string
          description: "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        metadata:
          allOf:
            - $ref: '#/components/schemas/Any'
          description: "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        done:
          type: boolean
          description: "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        error:
          allOf:
            - $ref: '#/components/schemas/rpc.Status'
          description: The error result of the operation in case of failure or cancellation.
        response:
          allOf:
            - $ref: '#/components/schemas/Any'
          description: "The normal, successful response of the operation.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
      description: "This resource represents a long-running operation that is the result of a\nnetwork API call."
    mgmt.v1beta.Permission:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Defines whether the resource can be modified.
          readOnly: true
      description: Permission defines how a resource can be used.
    mgmt.v1beta.View:
      enum:
        - VIEW_BASIC
        - VIEW_FULL
      type: string
      description: "View defines how a resource is presented. It can be used as a parameter in a\nmethod request to allow clients to select the amount of information they\nwant in the response.\n\n - VIEW_BASIC: Default view, only includes basic information.\n - VIEW_FULL: Full representation."
    pipeline.v1beta.Permission:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Defines whether the pipeline can be modified.
        canTrigger:
          type: boolean
          description: Defines whether the pipeline can be executed.
        canRelease:
          type: boolean
          description: Defines whether the pipeline can be released.
      description: Permission defines how a pipeline can be used.
    pipeline.v1beta.View:
      enum:
        - VIEW_BASIC
        - VIEW_FULL
      type: string
      description: "View defines how a resource is presented. Most resources can share this view\ndefinition, the particular meaning of each value should be defined in the\nresource itself. Certain resources might have their own View definition if\nthey need to implement more than 2 (basic / full) views.\n\n - VIEW_BASIC: Default view.\n - VIEW_FULL: Full representation."
    rpc.Status:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        details:
          type: array
          items:
            $ref: '#/components/schemas/Any'
          description: "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
      description: "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    .AgentConfig:
      type: object
      properties:
        instructions:
          title: instructions
          type: string
        connections:
          type: object
          additionalProperties:
            type: string
          description: connection key(used connection id in recipe) and value(connection uid from namespace).
      description: AgentConfig represents the config for the chat agent.
    .Chunk:
      type: object
      properties:
        chunkUid:
          title: unique identifier of the chunk
          type: string
          readOnly: true
        retrievable:
          title: whether the chunk is retrievable
          type: boolean
          readOnly: true
        startPos:
          title: start position of the chunk in the source file
          type: integer
          format: int64
          readOnly: true
        endPos:
          title: end position of the chunk in the source file
          type: integer
          format: int64
          readOnly: true
        tokens:
          title: tokens of the chunk
          type: integer
          format: int64
          readOnly: true
        createTime:
          title: creation time of the chunk
          type: string
          format: date-time
          readOnly: true
        originalFileUid:
          title: original file unique identifier
          type: string
          readOnly: true
        contentType:
          title: content type
          allOf:
            - $ref: '#/components/schemas/ContentType'
          readOnly: true
      description: The Chunk message represents a chunk of data in the artifact system.
    .Permission:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Defines whether the pipeline can be modified.
        canTrigger:
          type: boolean
          description: Defines whether the pipeline can be executed.
      description: Permission defines how a pipeline can be used.
    .ReleaseStage:
      enum:
        - RELEASE_STAGE_ALPHA
        - RELEASE_STAGE_BETA
        - RELEASE_STAGE_GENERALLY_AVAILABLE
        - RELEASE_STAGE_CUSTOM
      type: string
      description: "ReleaseStage defines the stage of a release.\n\n - RELEASE_STAGE_ALPHA: Alpha.\n - RELEASE_STAGE_BETA: Beta.\n - RELEASE_STAGE_GENERALLY_AVAILABLE: Generally available.\n - RELEASE_STAGE_CUSTOM: Custom."
    .State:
      enum:
        - STATE_OFFLINE
        - STATE_ACTIVE
        - STATE_IDLE
        - STATE_ERROR
        - STATE_STARTING
        - STATE_SCALING_UP
        - STATE_SCALING_DOWN
      type: string
      description: "State describes the state of a model. See [Deploy\nModels](https://instill-ai.dev/docs/latest/model/deploy) for more\ninformation.\n\n - STATE_OFFLINE: Offline is the state when the model instance number is 0.\n - STATE_ACTIVE: Active is the state when a model is processing requests.\n - STATE_IDLE: Idle is the state when a model is alive but not processing requests.\n - STATE_ERROR: Error is the state when the model is undeployable.\n - STATE_STARTING: Starting is the state when the system is provisioning the necessary\nresources for the model\n - STATE_SCALING_UP: Scaling Up is the transition state when the system is provisioning compute\nresource for this model instance.\n - STATE_SCALING_DOWN: Scaling is the transition state when the system is releasing compute\nresource for this model instance."
    .Type:
      enum:
        - TYPE_STRING
        - TYPE_NUMBER
        - TYPE_BOOLEAN
        - TYPE_FILE
        - TYPE_DOCUMENT
      type: string
      description: "The type of the column.\n\n - TYPE_STRING: The type is a string.\n - TYPE_NUMBER: The type is a number.\n - TYPE_BOOLEAN: The type is a boolean.\n - TYPE_FILE: The type is a file resource.\n - TYPE_DOCUMENT: The type is a document resource."
    .View:
      enum:
        - VIEW_BASIC
        - VIEW_FULL
      type: string
      description: "View defines how a model definition is presented.\n\n - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).\n - VIEW_FULL: Full representation."
    .User:
      type: object
      properties:
        name:
          type: string
          description: "The name of the user, defined by its ID.\n- Format: `users/{user.id}`."
          readOnly: true
        uid:
          type: string
          description: "User UUID. This field is optionally set by users on creation (it will be\nserver-generated if unspecified)."
          readOnly: true
        id:
          type: string
          description: "Resource ID (used in `name` as the last segment). This conforms to\nRFC-1034, which restricts to letters, numbers, and hyphen, with the first\ncharacter a letter, the last a letter or a number, and a 63 character\nmaximum.\n\nNote that the ID can be updated."
        createTime:
          type: string
          description: Creation time.
          format: date-time
          readOnly: true
        updateTime:
          type: string
          description: Update time.
          format: date-time
          readOnly: true
        profile:
          allOf:
            - $ref: '#/components/schemas/UserProfile'
          description: Profile.
      description: "User describes an individual that interacts with Instill AI. It doesn't\ncontain any private information about the user."
  securitySchemes:
    Bearer:
      type: http
      description: 'Enter the token with the `Bearer ` prefix, e.g. `Bearer abcde12345`'
      scheme: bearer
      x-default: Bearer instill_sk_***
security:
  - Bearer: [ ]
tags:
  - name: ü™Ü Namespace
    description: 'Namespaces (e.g. User, Organization) that structure the resource hierarchy.'
  - name: üíß Pipeline
    description: Pipeline orchestration in Instill Core.
  - name: ‚öóÔ∏è Model
    description: AI Model resources for MLOps/LLMOps.
  - name: üíæ Artifact
    description: Data orchestration for unified unstructured data representation.
  - name: üçé Agent
    description: Ready-to-use AI agents.
  - name: Table
    description: Table resources for agents.
  - name: Folder
    description: Folder resources for agents.
  - name: üìä Metrics
    description: Resource usage metrics.
  - name: ü§ù Subscription
    description: Pricing plans on Instill Cloud.
externalDocs:
  description: More about Instill AI
  url: https://www.instill-ai.dev/docs